<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Y31,5724-Z78
// Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->

<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:local="recurrence.*" xmlns:local1="*"   
          layout="vertical" title="@Resource(bundle='calendarsample', key='calendarsample.recurrence.title')"  
          paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="5" verticalGap="0"
          implements="recurrence.IRecurrenceRuleEditor"
          showCloseButton="true"
          creationComplete="init()" >

  <mx:Script>
    <![CDATA[
      import mx.core.UIComponent;
      import mx.controls.Alert;
      import mx.events.CloseEvent;
      import mx.formatters.DateFormatter;
      import ilog.calendar.recurrence.RRule;
      
      private var _rrule:RRule;
      
            
      [Bindable]
      private var _date:Date; //dtStart
      
      private function init():void {
        untilDate.addEventListener("change", function (e:Event):void {
          moveRadio(3);
          dispatch();
          updateICalendarRule();
          
        });
        
        if (_date != null) {
          dtStartLabel.text = _dateFormatter.format(_date);        
          WeeklyRulePanel(nav.getChildAt(1)).startTime = _date;
        }
                        
        _textRulePanel = new TextRulePanel();
        _textRulePanel.percentWidth = 100;
        
        //to call create children...
        addChild(_textRulePanel);
        removeChild(_textRulePanel);        
        
        _textRulePanel.editButton.addEventListener(MouseEvent.CLICK, showTextEditor);
        
        _textRulePanel.textEditor.addEventListener("OK", textEditorHandler);
        
        if (_rrule != null) {
          setRecurrenceRuleImpl();
        }
        
        removeButton.enabled = _rrule != null;
        
        addEventListener("ruleChanged", function(e:Event):void {
          updateICalendarRule();
        });               
        
        updateICalendarRule();
        
        addEventListener(CloseEvent.CLOSE, function (e:Event):void {
          if (e.target != cancelButton) {           
            cancelHandler();
          }
        });
        
        buildUI();
      }
      
      private function buildUI():void {

        var format:String = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.count", ["|$count|"]);        
        Util.buildUI(this, choice2, format, handlerChoice2);
        
        format = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.until", ["|$untilDate|"]);        
        Util.buildUI(this, choice3, format, handlerChoice3);
                        
      }
      
      private function handlerChoice2(e:Event):void {
        moveRadio(2);
        dispatch();
      }  
      
      private function handlerChoice3(e:Event):void {
        moveRadio(3);
        dispatch();
      }
      
      public function set date(value:Date):void {
        
        _date = value;
        
        if (_dateFormatter == null) {
          _dateFormatter = new DateFormatter();
          _dateFormatter.formatString = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.startTime.format");
        }
        
        if(dtStartLabel) {         
          dtStartLabel.text = _dateFormatter.format(_date);        
          WeeklyRulePanel(nav.getChildAt(1)).startTime = date;
        }        
      }
      
      public function get date():Date {
        return _date;
      }
      
      private var _dateFormatter:DateFormatter;
      
      public function get recurrenceRule():RRule {
        
        var rEditor:IRecurrenceRuleEditor = IRecurrenceRuleEditor(nav.selectedChild);
        
        if (rEditor.isValid()) {
          var rrule:RRule = rEditor.recurrenceRule;
          
          switch(radioGroup.selectedValue) {
            
            case "radio2":
              var c:int = parseInt(count.text);
              if (c < 1) {
                c = 1;
              }
                         
              rrule.count = c;
              break
            
            case "radio3":
              rrule.until = untilDate.selectedDate;
              break;
              
            default:
              //forever
              
          }
        } else {
          return _textRulePanel.textEditor.recurrenceRule;
        }
        
        return rrule;
      }
      
      public function set recurrenceRule(value:RRule):void {
        _rrule = value;
        if (nav) {
          setRecurrenceRuleImpl();
          removeButton.enabled = value != null;
        }
      }
        
      public function setRecurrenceRuleImpl():void {
        
        var r:RRule = _rrule;
        
        if (r == null) {
          reset();
          return;
        }
        
        var rEditor:IRecurrenceRuleEditor;
        
        switch(r.freq) {
                             
          case RRule.WEEKLY:            
            nav.selectedIndex = 1;
            rEditor = IRecurrenceRuleEditor(nav.getChildAt(1));            
            break;          
              
          case RRule.DAILY:
            nav.selectedIndex = 0;
            rEditor = IRecurrenceRuleEditor(nav.getChildAt(0));
            break;
          
          case RRule.MONTHLY:
            nav.selectedIndex = 2;
            rEditor = IRecurrenceRuleEditor(nav.getChildAt(2));
            break;
            
          case RRule.YEARLY:
            nav.selectedIndex = 3;
            rEditor = IRecurrenceRuleEditor(nav.getChildAt(3));
            break;             
        } 
        
        rEditor.recurrenceRule = r;
        _textRulePanel.textEditor.recurrenceRule = r;
        
        nav.enabled = rEditor.isValid();              
        
        if (r.count != 0) {
          
          radioGroup.selectedValue = "radio2";
          count.text = r.count.toString();
           
        } else if (r.until != null) {
          
          radioGroup.selectedValue = "radio3";        
          untilDate.selectedDate = r.until;   
        }
        
        updateICalendarRule();
      }
      
      private function dispatch():void {
        
        dispatchEvent(new Event("ruleChanged"));
        
        updateICalendarRule();        
      }
      
      public function reset():void {
        
        if (nav != null) {
          IRecurrenceRuleEditor(nav.getChildAt(0)).reset(); 
          IRecurrenceRuleEditor(nav.getChildAt(1)).reset();
          IRecurrenceRuleEditor(nav.getChildAt(2)).reset();
          IRecurrenceRuleEditor(nav.getChildAt(3)).reset();
          
          nav.selectedIndex = 0;  
          
          nav.enabled = true;         
          
          radioGroup.selectedValue = "radio1";
          untilDate.selectedDate = new Date();
          count.text = "1";
          
          _textRulePanel.textEditor.recurrenceRule = null;          
          
          updateICalendarRule();         
        }                                                                             
      }
      
      private function updateICalendarRule():void {
        _textRulePanel.ical.text = recurrenceRule.toString();
        
        _textRulePanel.textEditor.recurrenceRule = recurrenceRule;
      }           
      
      private function moveRadio(id:int):void {
        radioGroup.selectedValue = "radio"+id;
      }
      
      public function isValid():Boolean {
        return true;
      }
      
      private function showTextEditor(e:Event):void {
        _textRulePanel.textEditor.recurrenceRule = recurrenceRule;
        nav.enabled = false;
        _textRulePanel.textEditor.visible = true;
        _textRulePanel.iCalPane.visible = false;
        okButton.enabled = false;
      }
      
      private function textEditorHandler(e:Event):void {
        _textRulePanel.textEditor.visible = false;
        _textRulePanel.iCalPane.visible = true;
        recurrenceRule = _textRulePanel.textEditor.recurrenceRule;
        okButton.enabled = true;
        
      }
      
      private function okHandler():void {         
        dispatchEvent(new CloseEvent(CloseEvent.CLOSE, false, false, Alert.OK));
      } 
      
      private function cancelHandler():void {         
        cancelButton.dispatchEvent(new CloseEvent(CloseEvent.CLOSE, true, false, Alert.CANCEL));
      } 
      
      public static const REMOVE:int = 1; 
      
      private function removeHandler():void {         
        removeButton.dispatchEvent(new CloseEvent(CloseEvent.CLOSE, true, false, REMOVE));
      }
      
      private var _textRulePanel:TextRulePanel;     
      
      private function changeExpertMode():void {
        
        var modeOn:Boolean = expertMode.selected;
        
        if (modeOn) {
                  
          if (_textRulePanel.parent != this) {
            addChildAt(_textRulePanel, 1);
          }
        
        } else {
          
          if (_textRulePanel != null && _textRulePanel.parent == this) {
            removeChild(_textRulePanel);
          }
          
        }
                       
      }
      
      private function initSize():void {
        var maxW:Number = 0;
        
        
        for (var i:uint=0; i<nav.numChildren; i++) {
          var c:UIComponent = nav.getChildAt(i) as UIComponent;
          if (maxW < c.measuredWidth) {
            maxW = c.measuredWidth;
          }
        }
        
        nav.width = maxW;
      }
      
      override protected function measure():void {
        
        super.measure();
        
        var maxW:Number = 0;
                
        for (var i:uint=0; i<nav.numChildren; i++) {
          var c:UIComponent = nav.getChildAt(i) as UIComponent;
          if (maxW < c.measuredWidth) {
            maxW = c.measuredWidth;
          }
        }
                
        nav.width = maxW + 10;
        
        for (i=0; i<numChildren; i++) {
          c = getChildAt(i) as UIComponent;
          if (maxW < c.measuredWidth) {
            maxW = c.measuredWidth;
          }
        }
        
        measuredWidth = Math.max(nav.width, maxW) + 30;
      }
      
      
    ]]>
  </mx:Script>
  
  <mx:Spacer height="2"/>
  
  
    
  <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.title.recurrencePattern')" 
            textAlign="left" width="100%" fontWeight="bold" fontSize="11"/>
  
  <mx:HRule width="100%"/>
  
  <mx:Spacer height="10" width="100%"/>
      
  <mx:TabNavigator id="nav" creationPolicy="all" height="170" change="dispatch()" creationComplete="initSize()">
    
    <local:DailyRulePanel label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.daily')" 
                          paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" />
  
    <local:WeeklyRulePanel label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.weekly')" 
                           paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"  />
    
    <local:MonthlyRulePanel label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.monthly')" 
                            paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"  />
    
    <local:YearlyRulePanel label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.tab.title.yearly')" 
                           paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5"  />
    
  </mx:TabNavigator>
  
  <mx:Spacer height="10" width="100%"/>
     
  <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.title.recurrenceRange')" 
            textAlign="left" width="100%" fontWeight="bold" fontSize="11"/>
  
  <mx:HRule width="100%"/>
  
  <mx:Spacer height="10" width="100%"/>   
  
  <mx:VBox>
  
    <mx:HBox>
      <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.label.start')" 
                fontWeight="bold" />
      <mx:Label id="dtStartLabel" />
    </mx:HBox>
    
    <mx:VBox>
            
      <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.label.end')" 
                fontWeight="bold" />
      
      <mx:RadioButtonGroup id="radioGroup" change="dispatch()" />
      
      <mx:HBox paddingLeft="30">
        <mx:RadioButton id="radio1" value="radio1" selected="true" />
        <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.end.never.label')" 
                  click="dispatch(); moveRadio(1)" />                  
      </mx:HBox>
      
      <mx:HBox paddingLeft="30">
        <mx:RadioButton id="radio2" value="radio2" />
        <mx:HBox id="choice2" horizontalGap="0">
          <mx:TextInput id="count" width="37" text="1" change="dispatch(); moveRadio(2)" />  
        </mx:HBox>        
      </mx:HBox>
      
      <mx:HBox paddingLeft="30">
        <mx:RadioButton id="radio3" value="radio3" />
        <mx:HBox id="choice3" horizontalGap="0">                   
          <mx:DateField id="untilDate"/>
        </mx:HBox>
                        
      </mx:HBox>      
      
    </mx:VBox>
  </mx:VBox>
  
  <mx:Spacer height="20" width="100%"/>
  
  <mx:CheckBox id="expertMode" selected="false" 
               label="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.expertMode')"
               change="changeExpertMode()" />
  
  <mx:Spacer height="20" width="100%"/>  
  
  <mx:HBox horizontalAlign="center" width="100%"> 
    <mx:Button id="okButton" 
             label="@Resource(bundle='calendarsample', key='calendarsample.dialog.button.ok')" 
             click="okHandler()"/>
  <mx:Button id="cancelButton" 
             label="@Resource(bundle='calendarsample', key='calendarsample.dialog.button.cancel')" 
             click="cancelHandler()"/>
  <mx:Button id="removeButton" 
             label="@Resource(bundle='calendarsample', key='calendarsample.properties.button.remove')" 
             click="removeHandler()"/>         
                      
  </mx:HBox>    
  
 
</mx:TitleWindow>
