<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=utf-8"/><title>EventPanel.mxml</title><link rel="stylesheet" type="text/css" href="../SourceStyles.css"/></head><body><pre>&lt;?<span class="MXMLComponent_Tag">xml</span> version=<span class="ActionScriptString">"1.0"</span> encoding=<span class="ActionScriptString">"utf-8"</span>?&gt;
<span class="ActionScriptComment">&lt;!--</span>
<span class="ActionScriptComment">///////////////////////////////////////////////////////////////////////////////</span>
<span class="ActionScriptComment">// Licensed Materials - Property of IBM</span>
<span class="ActionScriptComment">// 5724-Y31,5724-Z78</span>
<span class="ActionScriptComment">// Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.</span>
<span class="ActionScriptComment">//</span>
<span class="ActionScriptComment">// Note to U.S. Government Users Restricted Rights:</span>
<span class="ActionScriptComment">// Use, duplication or disclosure restricted by GSA ADP Schedule</span>
<span class="ActionScriptComment">// Contract with IBM Corp.</span>
<span class="ActionScriptComment">///////////////////////////////////////////////////////////////////////////////</span>
<span class="ActionScriptComment">--&gt;</span>

&lt;<span class="MXMLComponent_Tag">mx:Panel</span> xmlns:mx=<span class="ActionScriptString">"http://www.adobe.com/2006/mxml"</span> 
          paddingLeft=<span class="ActionScriptString">"10"</span> paddingRight=<span class="ActionScriptString">"10"</span> paddingTop=<span class="ActionScriptString">"5"</span> paddingBottom=<span class="ActionScriptString">"5"</span> 
          borderStyle=<span class="ActionScriptString">"solid"</span> borderColor=<span class="ActionScriptString">"#CCCCCC"</span>
          verticalGap=<span class="ActionScriptString">"0"</span>
          creationComplete=<span class="ActionScriptString">"init()"</span>&gt;
          
  &lt;<span class="MXMLSpecial_Tag">mx:Script</span>&gt;
    &lt;![<span class="MXMLComponent_Tag">CDATA</span><span class="ActionScriptBracket/Brace">[</span>
    <span class="ActionScriptReserved">import</span> ilog.calendar.Calendar;
    <span class="ActionScriptReserved">import</span> ilog.calendar.CalendarItem;
    <span class="ActionScriptReserved">import</span> ilog.calendar.recurrence.IRecurrenceInstance;
    <span class="ActionScriptReserved">import</span> ilog.calendar.recurrence.RRule;
    <span class="ActionScriptReserved">import</span> ilog.calendar.recurrence.RecurrenceDescriptor;
    <span class="ActionScriptReserved">import</span> ilog.utils.GregorianCalendar;
    <span class="ActionScriptReserved">import</span> ilog.utils.TimeUnit;
    
    <span class="ActionScriptReserved">import</span> mx.collections.ArrayCollection;
    <span class="ActionScriptReserved">import</span> mx.collections.ICollectionView;
    <span class="ActionScriptReserved">import</span> mx.controls.Alert;
    <span class="ActionScriptReserved">import</span> mx.core.FlexGlobals;
    <span class="ActionScriptReserved">import</span> mx.events.CloseEvent;
    <span class="ActionScriptReserved">import</span> mx.events.ItemClickEvent;
    <span class="ActionScriptReserved">import</span> mx.managers.PopUpManager;
    
    <span class="ActionScriptReserved">import</span> recurrence.RecurrencePanel;
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _timeModel:Array;
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _col1:ArrayCollection;
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _col2:ArrayCollection;
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _startTime:Date;
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _endTime:Date;
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> init():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptvar">var</span> minutes:int = 0;
        
        _timeModel = <span class="ActionScriptBracket/Brace">[</span><span class="ActionScriptBracket/Brace">]</span>;
        
        while (minutes &lt;= 1440) {
          
          <span class="MXMLComponent_Tag">var</span> h:int = minutes / 60;
          <span class="ActionScriptvar">var</span> m:int = minutes - h * 60;         
          
          _timeModel.push(minutes);
          
          minutes += 15;
        <span class="ActionScriptBracket/Brace">}</span>
        
        _col1 = <span class="ActionScriptReserved">new</span> ArrayCollection(_timeModel);
        startTimeCombo.dataProvider = _col1;
        
        _col2 = <span class="ActionScriptReserved">new</span> ArrayCollection(_timeModel);
        _col2.filterFunction = endTimeComboFilterFunction;
        _col2.refresh();
        
        endTimeCombo.dataProvider = _col2;      
        
        _recurrencePanel = <span class="ActionScriptReserved">new</span> RecurrencePanel();        
                
        _recurrencePanel.addEventListener(CloseEvent.CLOSE, <span class="ActionScriptfunction">function</span>(e:CloseEvent):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
          closeRecurrencePanel();
          <span class="ActionScriptReserved">if</span> (e.detail == Alert.OK) <span class="ActionScriptBracket/Brace">{</span>
            applyRecurrence();  
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptReserved">if</span> (e.detail == Alert.CANCEL) <span class="ActionScriptBracket/Brace">{</span>
            <span class="ActionScriptComment">// rollback</span>
            _recurrencePanel.recurrenceRule = _rrule;  
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptReserved">if</span> (e.detail == RecurrencePanel.REMOVE) <span class="ActionScriptBracket/Brace">{</span>
            showRemoveRecurrenceConfirmation();
          <span class="ActionScriptBracket/Brace">}</span>
        <span class="ActionScriptBracket/Brace">}</span>);         
      <span class="ActionScriptBracket/Brace">}</span>   
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> endTimeComboFilterFunction(item:Object):Boolean <span class="ActionScriptBracket/Brace">{</span>
        <span class="ActionScriptReserved">if</span> (startDateChooser.selectedDate!= <span class="ActionScriptReserved">null</span> && endDateChooser.selectedDate!= <span class="ActionScriptReserved">null</span> && 
            startDateChooser.selectedDate.time  == endDateChooser.selectedDate.time) <span class="ActionScriptBracket/Brace">{</span>
          <span class="ActionScriptReserved">return</span> item &gt; int(startTimeCombo.selectedItem); 
        <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
          <span class="ActionScriptReserved">return</span> <span class="ActionScriptReserved">true</span>;
        <span class="ActionScriptBracket/Brace">}</span>
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> refreshEndTimeCombo():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        ICollectionView(endTimeCombo.dataProvider).refresh();
      <span class="ActionScriptBracket/Brace">}</span>
                        
      <span class="ActionScriptBracket/Brace">[</span><span class="ActionScriptMetadata">Bindable</span><span class="ActionScriptBracket/Brace">]</span>
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _calendar:Calendar;
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * @private</span>
<span class="ActionScriptASDoc">       */</span>
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">set</span> calendar(value:Calendar):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        _calendar = value;        
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">get</span> calendar():Calendar <span class="ActionScriptBracket/Brace">{</span>
        <span class="ActionScriptReserved">return</span> _calendar;        
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptBracket/Brace">[</span><span class="ActionScriptMetadata">Bindable</span><span class="ActionScriptBracket/Brace">]</span>
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _calendars:Array;
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * @private</span>
<span class="ActionScriptASDoc">       */</span>
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">set</span> calendars(value:Array):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        _calendars = value;
        calendarColor1.setStyle(<span class="ActionScriptString">"backgroundColor"</span>, _calendars<span class="ActionScriptBracket/Brace">[</span>0<span class="ActionScriptBracket/Brace">]</span>.color);
        calendarColor2.setStyle(<span class="ActionScriptString">"backgroundColor"</span>, _calendars<span class="ActionScriptBracket/Brace">[</span>1<span class="ActionScriptBracket/Brace">]</span>.color);
        calendarProRadio.value = _calendars<span class="ActionScriptBracket/Brace">[</span>0<span class="ActionScriptBracket/Brace">]</span>.id;
        calendarPerRadio.value = _calendars<span class="ActionScriptBracket/Brace">[</span>1<span class="ActionScriptBracket/Brace">]</span>.id;
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * The calendars list.</span>
<span class="ActionScriptASDoc">       */  </span>
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">get</span> calendars():Array <span class="ActionScriptBracket/Brace">{</span>
        <span class="ActionScriptReserved">return</span> _calendars;        
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _calendarItem:CalendarItem;
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * @private</span>
<span class="ActionScriptASDoc">       */</span>
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">set</span> calendarItem(value:CalendarItem):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        _calendarItem = value;  
        initEditors();
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * The calendar item to display and edit.</span>
<span class="ActionScriptASDoc">       */  </span>
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">get</span> calendarItem():CalendarItem <span class="ActionScriptBracket/Brace">{</span>
        <span class="ActionScriptReserved">return</span> _calendarItem;  
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * The data provider item, extracted from the calendar item.</span>
<span class="ActionScriptASDoc">       */   </span>
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _item:XML;
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * The start date that is beging edited.</span>
<span class="ActionScriptASDoc">       */  </span>
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _startDate:Date;
      
      <span class="ActionScriptASDoc">/**</span>
<span class="ActionScriptASDoc">       * The end date that is beging edited.</span>
<span class="ActionScriptASDoc">       */</span>
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _endDate:Date;
      
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _calendarRadioEnabled:Boolean = <span class="ActionScriptReserved">true</span>; 
      
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> initEditors():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptvar">var</span> enabled:Boolean =  _calendarItem != <span class="ActionScriptReserved">null</span>;
        
        summaryTextInput.enabled = enabled;
        deleteButton.enabled = enabled;
        startDateChooser.enabled = enabled;
        endDateChooser.enabled = enabled;
        startTimeCombo.enabled = enabled;
        endTimeCombo.enabled = enabled;
        
        descriptionTextArea.enabled = enabled;        
        allDayEventCheckbox.enabled = enabled;
        calendarProRadio.enabled = enabled && _calendarRadioEnabled;
        calendarPerRadio.enabled = enabled && _calendarRadioEnabled;
        
        summaryLabel.enabled = enabled;
        startTimeLabel.enabled = enabled;
        endTimeLabel.enabled = enabled;
        descriptionLabel.enabled = enabled;
        calendarLabel.enabled = enabled;
        recurrenceButton.enabled = enabled && !calendar.recurrenceDescriptor.isExceptionEvent(_calendarItem.data);        
        
        _recurrencePanel.reset();
        
        _rrule = <span class="ActionScriptReserved">null</span>;
        
        <span class="ActionScriptReserved">if</span> (_calendarItem != <span class="ActionScriptReserved">null</span>) <span class="ActionScriptBracket/Brace">{</span>                             
          
          <span class="ActionScriptReserved">if</span> (_calendarItem.data is IRecurrenceInstance) <span class="ActionScriptBracket/Brace">{</span>
            <span class="ActionScriptComment">//we are editing an occurrence of a recurring event.</span>
            _item = IRecurrenceInstance(_calendarItem.data).item as XML;
            _calendarItem = _calendar.itemToCalendarItem(_item);
            
            startDateChooser.enabled = <span class="ActionScriptReserved">false</span>;
            endDateChooser.enabled = <span class="ActionScriptReserved">false</span>;
            
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
            _item = _calendarItem.data as XML;  
          <span class="ActionScriptBracket/Brace">}</span>
          
          _startDate = <span class="ActionScriptReserved">new</span> Date(_calendarItem.startTime);
          _endDate = <span class="ActionScriptReserved">new</span> Date(_calendarItem.endTime);
          _startDate.hours = 0;
          _startDate.minutes = 0;
          _endDate.hours = 0;        
          _endDate.minutes = 0;
                                                                              
          summaryTextInput.text = _calendarItem.summary;
          descriptionTextArea.text = _calendarItem.description;
          
          validateHours(); <span class="ActionScriptComment">//fills all day check box</span>
          
          startDateChooser.selectedDate = _startDate;
          endDateChooser.selectedDate = _endDate;
          
          _startTime = <span class="ActionScriptReserved">new</span> Date(_calendarItem.startTime.time);
          _endTime = <span class="ActionScriptReserved">new</span> Date(_calendarItem.endTime.time);      
          
          startTimeCombo.selectedIndex = _col1.getItemIndex(_startTime.hours * 60 + _startTime.minutes);
          refreshEndTimeCombo();
          
          <span class="ActionScriptReserved">if</span> (allDayEventCheckbox.selected) <span class="ActionScriptBracket/Brace">{</span>
            endTimeCombo.selectedIndex = _col2.getItemIndex(60);
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
            <span class="ActionScriptvar">var</span> v:int = _endTime.hours * 60 + _endTime.minutes;
            endTimeCombo.selectedIndex = _col2.getItemIndex(v == 0 ? 1440 : v);
          <span class="ActionScriptBracket/Brace">}</span>             
                    
          radioGroup.selectedValue = _calendarItem.calendar;
                                                         
          <span class="ActionScriptvar">var</span> recDesc:RecurrenceDescriptor =  
            _calendar.recurrenceDescriptor as RecurrenceDescriptor;
          
          <span class="ActionScriptReserved">if</span> (recDesc.hasRecurrenceInstances(_item)) <span class="ActionScriptBracket/Brace">{</span>                      
                                                        
            <span class="ActionScriptvar">var</span> rrules:Array = recDesc.getRecurrenceRules(_item);                       
            _recurrencePanel.date = _calendarItem.startTime;
            
            <span class="ActionScriptReserved">if</span> (rrules != <span class="ActionScriptReserved">null</span> && rrules.length == 1) <span class="ActionScriptBracket/Brace">{</span>   
              _rrule = rrules<span class="ActionScriptBracket/Brace">[</span>0<span class="ActionScriptBracket/Brace">]</span>;
              _recurrencePanel.recurrenceRule = _rrule;                                  
            <span class="ActionScriptBracket/Brace">}</span>    
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
            _recurrencePanel.date = _calendarItem.startTime;
            _recurrencePanel.recurrenceRule = <span class="ActionScriptReserved">null</span>;            
          <span class="ActionScriptBracket/Brace">}</span>      
          
        <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
          summaryTextInput.text = <span class="ActionScriptReserved">null</span>;
          startDateChooser.selectedDate = <span class="ActionScriptReserved">null</span>;
          endDateChooser.selectedDate = <span class="ActionScriptReserved">null</span>;
          descriptionTextArea.text = <span class="ActionScriptReserved">null</span>;
          radioGroup.selectedValue = <span class="ActionScriptReserved">null</span>;
          startTimeCombo.selectedIndex = 0;
          refreshEndTimeCombo();
          endTimeCombo.selectedIndex = 0;
        <span class="ActionScriptBracket/Brace">}</span>
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _rrule:RRule;
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateTimeComboVisibility():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        startTimeCombo.visible = !allDayEventCheckbox.selected;        
        endTimeCombo.visible = !allDayEventCheckbox.selected;               
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _state:Object;
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateAllDay():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptvar">var</span> gCalendar:GregorianCalendar = _calendar.calendar;
        
        <span class="ActionScriptReserved">if</span> (allDayEventCheckbox.selected) <span class="ActionScriptBracket/Brace">{</span>
          
          _state = <span class="ActionScriptBracket/Brace">{</span>
            item: _calendarItem,
            hourStart: _calendarItem.startTime.hours,
            minutesStart: _calendarItem.startTime.minutes,
            hourEnd: _calendarItem.endTime.hours,
            minutesEnd: _calendarItem.endTime.minutes
          <span class="ActionScriptBracket/Brace">}</span>
          
          _startDate = gCalendar.floor(_startDate, TimeUnit.DAY, 1);
          _endDate = gCalendar.floor(_endDate, TimeUnit.DAY, 1); 
          
          
          startDateChooser.selectedDate = _startDate;
          endDateChooser.selectedDate = _endDate;                                       
          
        <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
          
          <span class="ActionScriptReserved">if</span> (_state != <span class="ActionScriptReserved">null</span> && _calendarItem == _state.item) <span class="ActionScriptBracket/Brace">{</span>                                                 
            
            startTimeCombo.selectedItem = _state.hourStart * 60 + _state.minutesStart;
            refreshEndTimeCombo();
            endTimeCombo.selectedItem =  _state.hourEnd * 60 + _state.minutesEnd;                            
            
            _startDate = gCalendar.floor(_startDate, TimeUnit.DAY, 1);
            _endDate = <span class="ActionScriptReserved">new</span> Date(_startDate.time);
            
            startDateChooser.selectedDate = _startDate;
            endDateChooser.selectedDate = _endDate;                              
            
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span> <span class="ActionScriptComment">//not a previous call</span>
            _startDate = gCalendar.floor(_startDate, TimeUnit.DAY, 1);
            _endDate = <span class="ActionScriptReserved">new</span> Date(_startDate.time);
            
            startDateChooser.selectedDate = _startDate;
            endDateChooser.selectedDate = _endDate;  
            startTimeCombo.selectedItem = (_calendar.startDisplayedTime<span class="ActionScriptBracket/Brace">[</span>0<span class="ActionScriptBracket/Brace">]</span> + 1)* 60;
            refreshEndTimeCombo();
            endTimeCombo.selectedItem =  (_calendar.startDisplayedTime<span class="ActionScriptBracket/Brace">[</span>0<span class="ActionScriptBracket/Brace">]</span> + 3) * 60;            
          <span class="ActionScriptBracket/Brace">}</span>                           
        <span class="ActionScriptBracket/Brace">}</span>
        
        updateTimeComboVisibility();
        updateStartAndEndTime();
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> validateHours():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptReserved">if</span> (_calendarItem.startTime.hours == 0 && _calendarItem.startTime.minutes == 0 &&
            _calendarItem.endTime.hours == 0 && _calendarItem.endTime.minutes == 0) <span class="ActionScriptBracket/Brace">{</span>
              
          <span class="ActionScriptvar">var</span> calendar:GregorianCalendar = _calendar.calendar;          
          _endDate = calendar.addUnits(_endDate, TimeUnit.DAY, -1, <span class="ActionScriptReserved">true</span>);
          
          allDayEventCheckbox.selected = <span class="ActionScriptReserved">true</span>;             
          
        <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
          allDayEventCheckbox.selected = <span class="ActionScriptReserved">false</span>;
        <span class="ActionScriptBracket/Brace">}</span>
        updateTimeComboVisibility();
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> computeStartAndEndTime():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        _startDate = startDateChooser.selectedDate;
        _endDate = endDateChooser.selectedDate;             
                       
        _startTime = <span class="ActionScriptReserved">new</span> Date(_startDate.time);
        _endTime = <span class="ActionScriptReserved">new</span> Date(_endDate.time);
        
        <span class="ActionScriptReserved">if</span> (allDayEventCheckbox.selected) <span class="ActionScriptBracket/Brace">{</span>               
          _endTime = _calendar.calendar.addUnits(_endDate, TimeUnit.DAY, 1);
        <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
          _startTime.hours = int(startTimeCombo.selectedItem) / 60;
          _startTime.minutes = int(startTimeCombo.selectedItem) - _startTime.hours * 60;
          
          <span class="ActionScriptvar">var</span> v:int = endTimeCombo.selectedItem as int;
          <span class="ActionScriptReserved">if</span> (v == 1440) <span class="ActionScriptBracket/Brace">{</span>
            _endTime = _calendar.calendar.addUnits(_endTime, TimeUnit.DAY, 1, <span class="ActionScriptReserved">true</span>);
          <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptBracket/Brace">{</span>
            _endTime.hours = v / 60;
            _endTime.minutes = v - _endTime.hours * 60;
          <span class="ActionScriptBracket/Brace">}</span>
        <span class="ActionScriptBracket/Brace">}</span> 
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateStartAndEndTime():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
      
        validateRange();
        
        computeStartAndEndTime();    
        
        _item.@startTime = _startTime.toString();
        updateCollection(<span class="ActionScriptString">"startTime"</span>);
        
        _item.@endTime = _endTime.toString();
        updateCollection(<span class="ActionScriptString">"endTime"</span>);
      <span class="ActionScriptBracket/Brace">}</span>          
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> validateRange():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        computeStartAndEndTime();
        
        <span class="ActionScriptReserved">if</span> (_startTime &gt; _endTime) <span class="ActionScriptBracket/Brace">{</span>
          _startDate = _calendar.calendar.floor(_endTime, TimeUnit.DAY, 1);
          _endDate = _calendar.calendar.floor(_startTime, TimeUnit.DAY, 1);
          
          startDateChooser.selectedDate = _startDate;
          endDateChooser.selectedDate = _endDate;     
          
          <span class="ActionScriptvar">var</span> minutesStart:int = _endTime.hours * 60 + _endTime.minutes;
          startTimeCombo.selectedItem = minutesStart;
          
          refreshEndTimeCombo();
          endTimeCombo.selectedItem = _startTime.hours * 60 + _startTime.minutes;
              
          
        <span class="ActionScriptBracket/Brace">}</span>
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> startTimeCombo_changeHandler():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptvar">var</span> d:int = _calendarItem.endTime.hours * 60 + _calendarItem.endTime.minutes - 
                    _calendarItem.startTime.hours * 60 - _calendarItem.startTime.minutes;
      
        refreshEndTimeCombo();
        <span class="ActionScriptvar">var</span> visible:Boolean = endTimeComboFilterFunction(endTimeCombo.selectedItem);
        <span class="ActionScriptReserved">if</span> (!visible) <span class="ActionScriptBracket/Brace">{</span>
          endTimeCombo.selectedItem = Math.min(1440, startTimeCombo.selectedItem + d);
        <span class="ActionScriptBracket/Brace">}</span>
        updateStartAndEndTime();
      <span class="ActionScriptBracket/Brace">}</span>
        
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateSummary():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        _item.@summary = summaryTextInput.text;
        updateCollection(<span class="ActionScriptString">"summary"</span>);
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateDescription():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        _item.@description = descriptionTextArea.text;
        updateCollection(<span class="ActionScriptString">"description"</span>);
      <span class="ActionScriptBracket/Brace">}</span>               
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateCalendar(event:ItemClickEvent):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>                
        _item.@calendar = RadioButtonGroup(event.currentTarget).selectedValue;               
        updateCollection(<span class="ActionScriptString">"calendar"</span>);
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> updateCollection(property:String=<span class="ActionScriptReserved">null</span>):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>          
        ICollectionView(_calendar.dataProvider).itemUpdated(_item, property);          
      <span class="ActionScriptBracket/Brace">}</span>  
      
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> setFocusOnSummary(selectText:Boolean=<span class="ActionScriptReserved">true</span>):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        <span class="ActionScriptReserved">if</span> (_calendarItem != <span class="ActionScriptReserved">null</span>) <span class="ActionScriptBracket/Brace">{</span>
          summaryTextInput.setFocus();
          <span class="ActionScriptReserved">if</span> (selectText) <span class="ActionScriptBracket/Brace">{</span>
            summaryTextInput.selectionBeginIndex = 0;
            summaryTextInput.selectionEndIndex = _calendarItem.summary.length;
          <span class="ActionScriptBracket/Brace">}</span>
        <span class="ActionScriptBracket/Brace">}</span>
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptvar">var</span> _recurrencePanel:RecurrencePanel;
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> showRecurrencePanel():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
                        
        PopUpManager.addPopUp(_recurrencePanel, DisplayObject(FlexGlobals.topLevelApplication), <span class="ActionScriptReserved">true</span>);            
        PopUpManager.centerPopUp(_recurrencePanel);   
      <span class="ActionScriptBracket/Brace">}</span> 
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> applyRecurrence():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
                       
        _calendarItem.data.@rrules = _recurrencePanel.recurrenceRule;
        _calendarItem.data.@recurring = <span class="ActionScriptString">"true"</span>;
                       
        _calendar.selectedItems = <span class="ActionScriptReserved">null</span>;
        calendarItem = <span class="ActionScriptReserved">null</span>;                      
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> showRemoveRecurrenceConfirmation():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptvar">var</span> text:String = resourceManager.getString(<span class="ActionScriptString">"calendarsample"</span>, <span class="ActionScriptString">"calendarsample.properties.confirmation.recurrence.remove.label"</span>);
        <span class="ActionScriptvar">var</span> title:String = resourceManager.getString(<span class="ActionScriptString">"calendarsample"</span>, <span class="ActionScriptString">"calendarsample.properties.confirmation.recurrence.remove.title"</span>);
        Alert.show(text, title, Alert.YES | Alert.NO, <span class="ActionScriptReserved">null</span>, removeRecurrence, <span class="ActionScriptReserved">null</span>, Alert.YES);
        
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> removeRecurrence(event:CloseEvent):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptReserved">if</span> (event.detail == Alert.YES) <span class="ActionScriptBracket/Brace">{</span>
          
          <span class="ActionScriptComment">//apply        </span>
          _calendarItem.data.@recurring = <span class="ActionScriptString">"false"</span>;
          _calendarItem.data.@rrules = <span class="ActionScriptString">""</span>;
          
          <span class="ActionScriptComment">//after the change, select the item that is now non recurring.</span>
          <span class="ActionScriptvar">var</span> item:Object = _calendarItem.data;
          callLater(<span class="ActionScriptfunction">function</span>():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
            _calendar.validateNow();
            _calendar.selectedItems = <span class="ActionScriptBracket/Brace">[</span>item<span class="ActionScriptBracket/Brace">]</span>;
            calendarItem = _calendar.itemToCalendarItem(item);
          <span class="ActionScriptBracket/Brace">}</span>);
          
          calendarItem = <span class="ActionScriptReserved">null</span>;
        <span class="ActionScriptBracket/Brace">}</span>
                               
      <span class="ActionScriptBracket/Brace">}</span>         
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> closeRecurrencePanel():<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        PopUpManager.removePopUp(_recurrencePanel);
      <span class="ActionScriptBracket/Brace">}</span>
      
      
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">set</span> calendarRadioEnabled(value:Boolean):<span class="ActionScriptReserved">void</span> <span class="ActionScriptBracket/Brace">{</span>
        _calendarRadioEnabled = value;
        calendarPerRadio.enabled = _calendarItem != <span class="ActionScriptReserved">null</span> && value;
        calendarProRadio.enabled = _calendarItem != <span class="ActionScriptReserved">null</span> && value;
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">public</span> <span class="ActionScriptfunction">function</span> <span class="ActionScriptReserved">get</span> calendarRadioEnabled():Boolean <span class="ActionScriptBracket/Brace">{</span>
        <span class="ActionScriptReserved">return</span> _calendarRadioEnabled;
      <span class="ActionScriptBracket/Brace">}</span>
      
      <span class="ActionScriptReserved">private</span> <span class="ActionScriptfunction">function</span> timeLabelFunction(value:int):String <span class="ActionScriptBracket/Brace">{</span>
        
        <span class="ActionScriptReserved">if</span> (value == 1440) <span class="ActionScriptBracket/Brace">{</span>
          <span class="ActionScriptReserved">return</span> <span class="ActionScriptString">"Midnight"</span>;
        <span class="ActionScriptBracket/Brace">}</span> 
        
        <span class="ActionScriptvar">var</span> h:int = value / 60;
        <span class="ActionScriptvar">var</span> m:int = value - h * 60;
        
        <span class="ActionScriptvar">var</span> apm:String = h &lt; 12 ? <span class="ActionScriptString">"am"</span> : <span class="ActionScriptString">"pm"</span>; 
        
        <span class="MXMLComponent_Tag">if</span> (h == 0) <span class="ActionScriptBracket/Brace">{</span>
          h = 12;
        <span class="ActionScriptBracket/Brace">}</span> <span class="ActionScriptReserved">else</span> <span class="ActionScriptReserved">if</span> (h &gt; 12) <span class="ActionScriptBracket/Brace">{</span>
          h -= 12;
        <span class="ActionScriptBracket/Brace">}</span>
        
        <span class="ActionScriptReserved">return</span> h + <span class="ActionScriptString">":"</span> + (m &lt; 10 ? <span class="ActionScriptString">"0"</span> : <span class="ActionScriptString">""</span>) + <span class="MXMLComponent_Tag">m</span> + apm;
      <span class="ActionScriptBracket/Brace">}</span>      
      
    <span class="ActionScriptBracket/Brace">]</span><span class="ActionScriptBracket/Brace">]</span>&gt;
  &lt;/<span class="MXMLSpecial_Tag">mx:Script</span>&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"2"</span>/&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:LinkButton</span> id=<span class="ActionScriptString">"addButton"</span>  
                 label=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.properties.NewEvent')"</span> 
                 toolTip=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.properties.tip.NewEvent')"</span>
                 click=<span class="ActionScriptString">"dispatchEvent(new Event('createEvent'))"</span>
                 icon=<span class="ActionScriptString">"@Embed(source='../resources/new_calendar_item.png')"</span>
                 width=<span class="ActionScriptString">"100%"</span> height=<span class="ActionScriptString">"22"</span> textAlign=<span class="ActionScriptString">"left"</span>
                 mouseOver=<span class="ActionScriptString">"if (addButton.enabled) addButton.setStyle('textDecoration','underline')"</span>
                 mouseOut=<span class="ActionScriptString">"addButton.setStyle('textDecoration','none')"</span>
                 color=<span class="ActionScriptString">"#0054FF"</span>/&gt;
                 
  &lt;<span class="MXMLComponent_Tag">mx:LinkButton</span> id=<span class="ActionScriptString">"deleteButton"</span> enabled=<span class="ActionScriptString">"false"</span> 
                 label=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.properties.DeleteEvent')"</span> 
                 toolTip=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.properties.tip.DeleteEvent')"</span>
                 click=<span class="ActionScriptString">"dispatchEvent(new Event('deleteEvent'))"</span>
                 icon=<span class="ActionScriptString">"@Embed(source='../resources/delete_calendar_item.png')"</span>
                 width=<span class="ActionScriptString">"100%"</span> height=<span class="ActionScriptString">"22"</span> textAlign=<span class="ActionScriptString">"left"</span>
                 mouseOver=<span class="ActionScriptString">"if (deleteButton.enabled) deleteButton.setStyle('textDecoration','underline')"</span>
                 mouseOut=<span class="ActionScriptString">"deleteButton.setStyle('textDecoration','none')"</span>
                 color=<span class="ActionScriptString">"#0054FF"</span>/&gt;

  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"5"</span> width=<span class="ActionScriptString">"100%"</span>/&gt;
              
  &lt;<span class="MXMLComponent_Tag">mx:LinkButton</span> id=<span class="ActionScriptString">"recurrenceButton"</span> enabled=<span class="ActionScriptString">"false"</span> 
                 label=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.properties.Recurrence')"</span> 
                 toolTip=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.properties.tip.Recurrence')"</span>
                 click=<span class="ActionScriptString">"showRecurrencePanel()"</span>
                 icon=<span class="ActionScriptString">"@Embed(source='../resources/recurrence.png')"</span>
                 width=<span class="ActionScriptString">"100%"</span> height=<span class="ActionScriptString">"22"</span> textAlign=<span class="ActionScriptString">"left"</span>
                 mouseOver=<span class="ActionScriptString">"if (recurrenceButton.enabled) recurrenceButton.setStyle('textDecoration','underline')"</span>
                 mouseOut=<span class="ActionScriptString">"recurrenceButton.setStyle('textDecoration','none')"</span>
                 color=<span class="ActionScriptString">"#0054FF"</span>/&gt;      

  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"5"</span> width=<span class="ActionScriptString">"100%"</span>/&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Label</span> text=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.title.Properties')"</span> textAlign=<span class="ActionScriptString">"left"</span> width=<span class="ActionScriptString">"100%"</span> fontWeight=<span class="ActionScriptString">"bold"</span> fontSize=<span class="ActionScriptString">"11"</span>/&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:HRule</span> width=<span class="ActionScriptString">"100%"</span>/&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"10"</span> width=<span class="ActionScriptString">"100%"</span>/&gt;
                            
  &lt;<span class="MXMLComponent_Tag">mx:Label</span> id=<span class="ActionScriptString">"summaryLabel"</span> text=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.event.label.Summary')"</span> 
            fontWeight=<span class="ActionScriptString">"bold"</span> textAlign=<span class="ActionScriptString">"right"</span> enabled=<span class="ActionScriptString">"false"</span>/&gt;
            
  &lt;<span class="MXMLComponent_Tag">mx:TextInput</span> id=<span class="ActionScriptString">"summaryTextInput"</span> width=<span class="ActionScriptString">"100%"</span> change=<span class="ActionScriptString">"updateSummary()"</span> enabled=<span class="ActionScriptString">"false"</span>/&gt;
   
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"10"</span> width=<span class="ActionScriptString">"100%"</span> /&gt;
   
  &lt;<span class="MXMLComponent_Tag">mx:Label</span> id=<span class="ActionScriptString">"startTimeLabel"</span> text=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.event.label.StartTime')"</span> 
            fontWeight=<span class="ActionScriptString">"bold"</span> textAlign=<span class="ActionScriptString">"right"</span> enabled=<span class="ActionScriptString">"false"</span>/&gt;
  &lt;<span class="MXMLComponent_Tag">mx:HBox</span>&gt;
    &lt;<span class="MXMLComponent_Tag">mx:DateField</span> id=<span class="ActionScriptString">"startDateChooser"</span>  change=<span class="ActionScriptString">"updateStartAndEndTime()"</span>  enabled=<span class="ActionScriptString">"false"</span>/&gt;
    &lt;<span class="MXMLComponent_Tag">mx:ComboBox</span> id=<span class="ActionScriptString">"startTimeCombo"</span> change=<span class="ActionScriptString">"startTimeCombo_changeHandler()"</span> enabled=<span class="ActionScriptString">"false"</span> labelFunction=<span class="ActionScriptBracket/Brace">"{</span>timeLabelFunction<span class="ActionScriptBracket/Brace">}"</span>  /&gt;             
  &lt;/<span class="MXMLComponent_Tag">mx:HBox</span>&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"5"</span> width=<span class="ActionScriptString">"100%"</span> /&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Label</span> id=<span class="ActionScriptString">"endTimeLabel"</span> text=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.event.label.EndTime')"</span> 
            fontWeight=<span class="ActionScriptString">"bold"</span> textAlign=<span class="ActionScriptString">"right"</span> enabled=<span class="ActionScriptString">"false"</span>/&gt;
  &lt;<span class="MXMLComponent_Tag">mx:HBox</span>&gt;
    &lt;<span class="MXMLComponent_Tag">mx:DateField</span> id=<span class="ActionScriptString">"endDateChooser"</span> change=<span class="ActionScriptString">"updateStartAndEndTime()"</span> enabled=<span class="ActionScriptString">"false"</span> /&gt;       
    &lt;<span class="MXMLComponent_Tag">mx:ComboBox</span> id=<span class="ActionScriptString">"endTimeCombo"</span> change=<span class="ActionScriptString">"updateStartAndEndTime()"</span> enabled=<span class="ActionScriptString">"false"</span> labelFunction=<span class="ActionScriptBracket/Brace">"{</span>timeLabelFunction<span class="ActionScriptBracket/Brace">}"</span>  /&gt;
  &lt;/<span class="MXMLComponent_Tag">mx:HBox</span>&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"10"</span> width=<span class="ActionScriptString">"100%"</span> /&gt;
         
  &lt;<span class="MXMLComponent_Tag">mx:CheckBox</span> id=<span class="ActionScriptString">"allDayEventCheckbox"</span> label=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.event.label.AllDay')"</span> 
               fontWeight=<span class="ActionScriptString">"bold"</span> enabled=<span class="ActionScriptString">"false"</span> click=<span class="ActionScriptString">"updateAllDay()"</span> /&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"10"</span> width=<span class="ActionScriptString">"100%"</span> /&gt;
    
  &lt;<span class="MXMLComponent_Tag">mx:Label</span> id=<span class="ActionScriptString">"descriptionLabel"</span> text=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.event.label.Description')"</span> 
            fontWeight=<span class="ActionScriptString">"bold"</span> textAlign=<span class="ActionScriptString">"right"</span> enabled=<span class="ActionScriptString">"false"</span>/&gt;
            
  &lt;<span class="MXMLComponent_Tag">mx:TextArea</span> id=<span class="ActionScriptString">"descriptionTextArea"</span>  width=<span class="ActionScriptString">"100%"</span> height=<span class="ActionScriptString">"50"</span> change=<span class="ActionScriptString">"updateDescription()"</span> enabled=<span class="ActionScriptString">"false"</span> /&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Spacer</span> height=<span class="ActionScriptString">"10"</span> width=<span class="ActionScriptString">"100%"</span> /&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:Label</span> id=<span class="ActionScriptString">"calendarLabel"</span> text=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.event.label.Calendar')"</span> 
             fontWeight=<span class="ActionScriptString">"bold"</span> textAlign=<span class="ActionScriptString">"right"</span> enabled=<span class="ActionScriptString">"false"</span>/&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:RadioButtonGroup</span> id=<span class="ActionScriptString">"radioGroup"</span> itemClick=<span class="ActionScriptString">"updateCalendar(event)"</span> /&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:HBox</span> verticalAlign=<span class="ActionScriptString">"middle"</span>&gt;
    &lt;<span class="MXMLComponent_Tag">mx:Box</span> id=<span class="ActionScriptString">"calendarColor1"</span> width=<span class="ActionScriptString">"20"</span> height=<span class="ActionScriptString">"20"</span> borderColor=<span class="ActionScriptString">"#CCCCCC"</span> borderStyle=<span class="ActionScriptString">"solid"</span> /&gt;
    &lt;<span class="MXMLComponent_Tag">mx:RadioButton</span> id=<span class="ActionScriptString">"calendarProRadio"</span> groupName=<span class="ActionScriptString">"radioGroup"</span> 
                    label=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.calendar.Professional')"</span> 
                    enabled=<span class="ActionScriptString">"false"</span> /&gt;
  &lt;/<span class="MXMLComponent_Tag">mx:HBox</span>&gt;
  
  &lt;<span class="MXMLComponent_Tag">mx:HBox</span> verticalAlign=<span class="ActionScriptString">"middle"</span>&gt;
    &lt;<span class="MXMLComponent_Tag">mx:Box</span> id=<span class="ActionScriptString">"calendarColor2"</span> width=<span class="ActionScriptString">"20"</span> height=<span class="ActionScriptString">"20"</span> borderColor=<span class="ActionScriptString">"#CCCCCC"</span> borderStyle=<span class="ActionScriptString">"solid"</span> /&gt;
    &lt;<span class="MXMLComponent_Tag">mx:RadioButton</span> id=<span class="ActionScriptString">"calendarPerRadio"</span> groupName=<span class="ActionScriptString">"radioGroup"</span> 
                    label=<span class="ActionScriptString">"@Resource(bundle='calendarsample', key='calendarsample.calendar.Personal')"</span> 
                    enabled=<span class="ActionScriptString">"false"</span> /&gt;
  &lt;/<span class="MXMLComponent_Tag">mx:HBox</span>&gt; 
  
&lt;/<span class="MXMLComponent_Tag">mx:Panel</span>&gt;
</pre></body></html>