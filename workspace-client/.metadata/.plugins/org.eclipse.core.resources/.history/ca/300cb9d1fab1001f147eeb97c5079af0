<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Y31,5724-Z78
// Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->

<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" 
          paddingLeft="10" paddingRight="10" paddingTop="5" paddingBottom="5" 
          borderStyle="solid" borderColor="#CCCCCC"
          verticalGap="0"
          creationComplete="init()">
          
  <mx:Script>
    <![CDATA[
    import ilog.calendar.Calendar;
    import ilog.calendar.CalendarItem;
    import ilog.calendar.recurrence.IRecurrenceInstance;
    import ilog.calendar.recurrence.RRule;
    import ilog.calendar.recurrence.RecurrenceDescriptor;
    import ilog.utils.GregorianCalendar;
    import ilog.utils.TimeUnit;
    
    import mx.collections.ArrayCollection;
    import mx.collections.ICollectionView;
    import mx.controls.Alert;
    import mx.core.FlexGlobals;
    import mx.events.CloseEvent;
    import mx.events.ItemClickEvent;
    import mx.managers.PopUpManager;
    
    import recurrence.RecurrencePanel;
      
      private var _timeModel:Array;
      private var _col1:ArrayCollection;
      private var _col2:ArrayCollection;
      
      private var _startTime:Date;
      private var _endTime:Date;
      
      private function init():void {
        
        var minutes:int = 0;
        
        _timeModel = [];
        
        while (minutes <= 1440) {
          
          var h:int = minutes / 60;
          var m:int = minutes - h * 60;         
          
          _timeModel.push(minutes);
          
          minutes += 15;
        }
        
        _col1 = new ArrayCollection(_timeModel);
        startTimeCombo.dataProvider = _col1;
        
        _col2 = new ArrayCollection(_timeModel);
        _col2.filterFunction = endTimeComboFilterFunction;
        _col2.refresh();
        
        endTimeCombo.dataProvider = _col2;      
        
        _recurrencePanel = new RecurrencePanel();        
                
        _recurrencePanel.addEventListener(CloseEvent.CLOSE, function(e:CloseEvent):void {
          closeRecurrencePanel();
          if (e.detail == Alert.OK) {
            applyRecurrence();  
          } else if (e.detail == Alert.CANCEL) {
            // rollback
            _recurrencePanel.recurrenceRule = _rrule;  
          } else if (e.detail == RecurrencePanel.REMOVE) {
            showRemoveRecurrenceConfirmation();
          }
        });         
      }   
      
      private function endTimeComboFilterFunction(item:Object):Boolean {
        if (startDateChooser.selectedDate!= null && endDateChooser.selectedDate!= null && 
            startDateChooser.selectedDate.time  == endDateChooser.selectedDate.time) {
          return item > int(startTimeCombo.selectedItem); 
        } else {
          return true;
        }
      }
      
      private function refreshEndTimeCombo():void {
        ICollectionView(endTimeCombo.dataProvider).refresh();
      }
                        
      [Bindable]
      private var _calendar:Calendar;
      
      /**
       * @private
       */
      public function set calendar(value:Calendar):void {
        _calendar = value;        
      }
      
      public function get calendar():Calendar {
        return _calendar;        
      }
      
      [Bindable]
      private var _calendars:Array;
      
      /**
       * @private
       */
      public function set calendars(value:Array):void {
        _calendars = value;
        calendarColor1.setStyle("backgroundColor", _calendars[0].color);
        calendarColor2.setStyle("backgroundColor", _calendars[1].color);
        calendarProRadio.value = _calendars[0].id;
        calendarPerRadio.value = _calendars[1].id;
      }
      
      /**
       * The calendars list.
       */  
      public function get calendars():Array {
        return _calendars;        
      }
      
      private var _calendarItem:CalendarItem;
      
      /**
       * @private
       */
      public function set calendarItem(value:CalendarItem):void {
        _calendarItem = value;  
        initEditors();
      }
      
      /**
       * The calendar item to display and edit.
       */  
      public function get calendarItem():CalendarItem {
        return _calendarItem;  
      }
      
      /**
       * The data provider item, extracted from the calendar item.
       */   
      private var _item:XML;
      
      /**
       * The start date that is beging edited.
       */  
      private var _startDate:Date;
      
      /**
       * The end date that is beging edited.
       */
      private var _endDate:Date;
      
      
      private var _calendarRadioEnabled:Boolean = true; 
      
      
      private function initEditors():void {
        
        var enabled:Boolean =  _calendarItem != null;
        
        summaryTextInput.enabled = enabled;
        deleteButton.enabled = enabled;
        startDateChooser.enabled = enabled;
        endDateChooser.enabled = enabled;
        startTimeCombo.enabled = enabled;
        endTimeCombo.enabled = enabled;
        
        descriptionTextArea.enabled = enabled;        
        allDayEventCheckbox.enabled = enabled;
        calendarProRadio.enabled = enabled && _calendarRadioEnabled;
        calendarPerRadio.enabled = enabled && _calendarRadioEnabled;
        
        summaryLabel.enabled = enabled;
        startTimeLabel.enabled = enabled;
        endTimeLabel.enabled = enabled;
        descriptionLabel.enabled = enabled;
        calendarLabel.enabled = enabled;
        recurrenceButton.enabled = enabled && !calendar.recurrenceDescriptor.isExceptionEvent(_calendarItem.data);        
        
        _recurrencePanel.reset();
        
        _rrule = null;
        
        if (_calendarItem != null) {                             
          
          if (_calendarItem.data is IRecurrenceInstance) {
            //we are editing an occurrence of a recurring event.
            _item = IRecurrenceInstance(_calendarItem.data).item as XML;
            _calendarItem = _calendar.itemToCalendarItem(_item);
            
            startDateChooser.enabled = false;
            endDateChooser.enabled = false;
            
          } else {
            _item = _calendarItem.data as XML;  
          }
          
          _startDate = new Date(_calendarItem.startTime);
          _endDate = new Date(_calendarItem.endTime);
          _startDate.hours = 0;
          _startDate.minutes = 0;
          _endDate.hours = 0;        
          _endDate.minutes = 0;
                                                                              
          summaryTextInput.text = _calendarItem.summary;
          descriptionTextArea.text = _calendarItem.description;
          
          validateHours(); //fills all day check box
          
          startDateChooser.selectedDate = _startDate;
          endDateChooser.selectedDate = _endDate;
          
          _startTime = new Date(_calendarItem.startTime.time);
          _endTime = new Date(_calendarItem.endTime.time);      
          
          startTimeCombo.selectedIndex = _col1.getItemIndex(_startTime.hours * 60 + _startTime.minutes);
          refreshEndTimeCombo();
          
          if (allDayEventCheckbox.selected) {
            endTimeCombo.selectedIndex = _col2.getItemIndex(60);
          } else {
            var v:int = _endTime.hours * 60 + _endTime.minutes;
            endTimeCombo.selectedIndex = _col2.getItemIndex(v == 0 ? 1440 : v);
          }             
                    
          radioGroup.selectedValue = _calendarItem.calendar;
                                                         
          var recDesc:RecurrenceDescriptor =  
            _calendar.recurrenceDescriptor as RecurrenceDescriptor;
          
          if (recDesc.hasRecurrenceInstances(_item)) {                      
                                                        
            var rrules:Array = recDesc.getRecurrenceRules(_item);                       
            _recurrencePanel.date = _calendarItem.startTime;
            
            if (rrules != null && rrules.length == 1) {   
              _rrule = rrules[0];
              _recurrencePanel.recurrenceRule = _rrule;                                  
            }    
          } else {
            _recurrencePanel.date = _calendarItem.startTime;
            _recurrencePanel.recurrenceRule = null;            
          }      
          
        } else {
          summaryTextInput.text = null;
          startDateChooser.selectedDate = null;
          endDateChooser.selectedDate = null;
          descriptionTextArea.text = null;
          radioGroup.selectedValue = null;
          startTimeCombo.selectedIndex = 0;
          refreshEndTimeCombo();
          endTimeCombo.selectedIndex = 0;
        }
      }
      
      private var _rrule:RRule;
      
      private function updateTimeComboVisibility():void {
        startTimeCombo.visible = !allDayEventCheckbox.selected;        
        endTimeCombo.visible = !allDayEventCheckbox.selected;               
      }
      
      private var _state:Object;
      
      private function updateAllDay():void {
        
        var gCalendar:GregorianCalendar = _calendar.calendar;
        
        if (allDayEventCheckbox.selected) {
          
          _state = {
            item: _calendarItem,
            hourStart: _calendarItem.startTime.hours,
            minutesStart: _calendarItem.startTime.minutes,
            hourEnd: _calendarItem.endTime.hours,
            minutesEnd: _calendarItem.endTime.minutes
          }
          
          _startDate = gCalendar.floor(_startDate, TimeUnit.DAY, 1);
          _endDate = gCalendar.floor(_endDate, TimeUnit.DAY, 1); 
          
          
          startDateChooser.selectedDate = _startDate;
          endDateChooser.selectedDate = _endDate;                                       
          
        } else {
          
          if (_state != null && _calendarItem == _state.item) {                                                 
            
            startTimeCombo.selectedItem = _state.hourStart * 60 + _state.minutesStart;
            refreshEndTimeCombo();
            endTimeCombo.selectedItem =  _state.hourEnd * 60 + _state.minutesEnd;                            
            
            _startDate = gCalendar.floor(_startDate, TimeUnit.DAY, 1);
            _endDate = new Date(_startDate.time);
            
            startDateChooser.selectedDate = _startDate;
            endDateChooser.selectedDate = _endDate;                              
            
          } else { //not a previous call
            _startDate = gCalendar.floor(_startDate, TimeUnit.DAY, 1);
            _endDate = new Date(_startDate.time);
            
            startDateChooser.selectedDate = _startDate;
            endDateChooser.selectedDate = _endDate;  
            startTimeCombo.selectedItem = (_calendar.startDisplayedTime[0] + 1)* 60;
            refreshEndTimeCombo();
            endTimeCombo.selectedItem =  (_calendar.startDisplayedTime[0] + 3) * 60;            
          }                           
        }
        
        updateTimeComboVisibility();
        updateStartAndEndTime();
      }
      
      private function validateHours():void {
        
        if (_calendarItem.startTime.hours == 0 && _calendarItem.startTime.minutes == 0 &&
            _calendarItem.endTime.hours == 0 && _calendarItem.endTime.minutes == 0) {
              
          var calendar:GregorianCalendar = _calendar.calendar;          
          _endDate = calendar.addUnits(_endDate, TimeUnit.DAY, -1, true);
          
          allDayEventCheckbox.selected = true;             
          
        } else {
          allDayEventCheckbox.selected = false;
        }
        updateTimeComboVisibility();
      }
      
      private function computeStartAndEndTime():void {
        
        _startDate = startDateChooser.selectedDate;
        _endDate = endDateChooser.selectedDate;             
                       
        _startTime = new Date(_startDate.time);
        _endTime = new Date(_endDate.time);
        
        if (allDayEventCheckbox.selected) {               
          _endTime = _calendar.calendar.addUnits(_endDate, TimeUnit.DAY, 1);
        } else {
          _startTime.hours = int(startTimeCombo.selectedItem) / 60;
          _startTime.minutes = int(startTimeCombo.selectedItem) - _startTime.hours * 60;
          
          var v:int = endTimeCombo.selectedItem as int;
          if (v == 1440) {
            _endTime = _calendar.calendar.addUnits(_endTime, TimeUnit.DAY, 1, true);
          } else {
            _endTime.hours = v / 60;
            _endTime.minutes = v - _endTime.hours * 60;
          }
        } 
      }
      
      private function updateStartAndEndTime():void {
      
        validateRange();
        
        computeStartAndEndTime();    
        
        _item.@startTime = _startTime.toString();
        updateCollection("startTime");
        
        _item.@endTime = _endTime.toString();
        updateCollection("endTime");
      }          
      
      private function validateRange():void {
        
        computeStartAndEndTime();
        
        if (_startTime > _endTime) {
          _startDate = _calendar.calendar.floor(_endTime, TimeUnit.DAY, 1);
          _endDate = _calendar.calendar.floor(_startTime, TimeUnit.DAY, 1);
          
          startDateChooser.selectedDate = _startDate;
          endDateChooser.selectedDate = _endDate;     
          
          var minutesStart:int = _endTime.hours * 60 + _endTime.minutes;
          startTimeCombo.selectedItem = minutesStart;
          
          refreshEndTimeCombo();
          endTimeCombo.selectedItem = _startTime.hours * 60 + _startTime.minutes;
              
          
        }
      }
      
      private function startTimeCombo_changeHandler():void {
        
        var d:int = _calendarItem.endTime.hours * 60 + _calendarItem.endTime.minutes - 
                    _calendarItem.startTime.hours * 60 - _calendarItem.startTime.minutes;
      
        refreshEndTimeCombo();
        var visible:Boolean = endTimeComboFilterFunction(endTimeCombo.selectedItem);
        if (!visible) {
          endTimeCombo.selectedItem = Math.min(1440, startTimeCombo.selectedItem + d);
        }
        updateStartAndEndTime();
      }
        
      private function updateSummary():void {
        _item.@summary = summaryTextInput.text;
        updateCollection("summary");
      }
      
      private function updateDescription():void {
        _item.@description = descriptionTextArea.text;
        updateCollection("description");
      }               
      
      private function updateCalendar(event:ItemClickEvent):void {                
        _item.@calendar = RadioButtonGroup(event.currentTarget).selectedValue;               
        updateCollection("calendar");
      }
      
      private function updateCollection(property:String=null):void {          
        ICollectionView(_calendar.dataProvider).itemUpdated(_item, property);          
      }  
      
      public function setFocusOnSummary(selectText:Boolean=true):void {
        if (_calendarItem != null) {
          summaryTextInput.setFocus();
          if (selectText) {
            summaryTextInput.selectionBeginIndex = 0;
            summaryTextInput.selectionEndIndex = _calendarItem.summary.length;
          }
        }
      }
      
      private var _recurrencePanel:RecurrencePanel;
      
      private function showRecurrencePanel():void {
                        
        PopUpManager.addPopUp(_recurrencePanel, DisplayObject(FlexGlobals.topLevelApplication), true);            
        PopUpManager.centerPopUp(_recurrencePanel);   
      } 
      
      private function applyRecurrence():void {
                       
        _calendarItem.data.@rrules = _recurrencePanel.recurrenceRule;
        _calendarItem.data.@recurring = "true";
                       
        _calendar.selectedItems = null;
        calendarItem = null;                      
      }
      
      private function showRemoveRecurrenceConfirmation():void {
        
        var text:String = resourceManager.getString("calendarsample", "calendarsample.properties.confirmation.recurrence.remove.label");
        var title:String = resourceManager.getString("calendarsample", "calendarsample.properties.confirmation.recurrence.remove.title");
        Alert.show(text, title, Alert.YES | Alert.NO, null, removeRecurrence, null, Alert.YES);
        
      }
      
      private function removeRecurrence(event:CloseEvent):void {
        
        if (event.detail == Alert.YES) {
          
          //apply        
          _calendarItem.data.@recurring = "false";
          _calendarItem.data.@rrules = "";
          
          //after the change, select the item that is now non recurring.
          var item:Object = _calendarItem.data;
          callLater(function():void {
            _calendar.validateNow();
            _calendar.selectedItems = [item];
            calendarItem = _calendar.itemToCalendarItem(item);
          });
          
          calendarItem = null;
        }
                               
      }         
      
      private function closeRecurrencePanel():void {
        PopUpManager.removePopUp(_recurrencePanel);
      }
      
      
      public function set calendarRadioEnabled(value:Boolean):void {
        _calendarRadioEnabled = value;
        calendarPerRadio.enabled = _calendarItem != null && value;
        calendarProRadio.enabled = _calendarItem != null && value;
      }
      
      public function get calendarRadioEnabled():Boolean {
        return _calendarRadioEnabled;
      }
      
      private function timeLabelFunction(value:int):String {
        
        if (value == 1440) {
          return "Midnight";
        } 
        
        var h:int = value / 60;
        var m:int = value - h * 60;
        
        var apm:String = h < 12 ? "am" : "pm"; 
        
        if (h == 0) {
          h = 12;
        } else if (h > 12) {
          h -= 12;
        }
        
        return h + ":" + (m < 10 ? "0" : "") + m + apm;
      }      
      
    ]]>
  </mx:Script>
  
  <mx:Spacer height="2"/>
  
  <mx:LinkButton id="addButton"  
                 label="@Resource(bundle='calendarsample', key='calendarsample.properties.NewEvent')" 
                 toolTip="@Resource(bundle='calendarsample', key='calendarsample.properties.tip.NewEvent')"
                 click="dispatchEvent(new Event('createEvent'))"
                 icon="@Embed(source='../resources/new_calendar_item.png')"
                 width="100%" height="22" textAlign="left"
                 mouseOver="if (addButton.enabled) addButton.setStyle('textDecoration','underline')"
                 mouseOut="addButton.setStyle('textDecoration','none')"
                 color="#0054FF"/>
                 
  <mx:LinkButton id="deleteButton" enabled="false" 
                 label="@Resource(bundle='calendarsample', key='calendarsample.properties.DeleteEvent')" 
                 toolTip="@Resource(bundle='calendarsample', key='calendarsample.properties.tip.DeleteEvent')"
                 click="dispatchEvent(new Event('deleteEvent'))"
                 icon="@Embed(source='../resources/delete_calendar_item.png')"
                 width="100%" height="22" textAlign="left"
                 mouseOver="if (deleteButton.enabled) deleteButton.setStyle('textDecoration','underline')"
                 mouseOut="deleteButton.setStyle('textDecoration','none')"
                 color="#0054FF"/>

  <mx:Spacer height="5" width="100%"/>
              
  <mx:LinkButton id="recurrenceButton" enabled="false" 
                 label="@Resource(bundle='calendarsample', key='calendarsample.properties.Recurrence')" 
                 toolTip="@Resource(bundle='calendarsample', key='calendarsample.properties.tip.Recurrence')"
                 click="showRecurrencePanel()"
                 icon="@Embed(source='../resources/recurrence.png')"
                 width="100%" height="22" textAlign="left"
                 mouseOver="if (recurrenceButton.enabled) recurrenceButton.setStyle('textDecoration','underline')"
                 mouseOut="recurrenceButton.setStyle('textDecoration','none')"
                 color="#0054FF"/>      

  <mx:Spacer height="5" width="100%"/>
  
  <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.title.Properties')" textAlign="left" width="100%" fontWeight="bold" fontSize="11"/>
  
  <mx:HRule width="100%"/>
  
  <mx:Spacer height="10" width="100%"/>
                            
  <mx:Label id="summaryLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.Summary')" 
            fontWeight="bold" textAlign="right" enabled="false"/>
            
  <mx:TextInput id="summaryTextInput" width="100%" change="updateSummary()" enabled="false"/>
   
  <mx:Spacer height="10" width="100%" />
   
  <mx:Label id="startTimeLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.StartTime')" 
            fontWeight="bold" textAlign="right" enabled="false"/>
  <mx:HBox>
    <mx:DateField id="startDateChooser"  change="updateStartAndEndTime()"  enabled="false"/>
    <mx:ComboBox id="startTimeCombo" change="startTimeCombo_changeHandler()" enabled="false" labelFunction="{timeLabelFunction}"  />             
  </mx:HBox>
  
  <mx:Spacer height="5" width="100%" />
  
  <mx:Label id="endTimeLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.EndTime')" 
            fontWeight="bold" textAlign="right" enabled="false"/>
  <mx:HBox>
    <mx:DateField id="endDateChooser" change="updateStartAndEndTime()" enabled="false" />       
    <mx:ComboBox id="endTimeCombo" change="updateStartAndEndTime()" enabled="false" labelFunction="{timeLabelFunction}"  />
  </mx:HBox>
  
  <mx:Spacer height="10" width="100%" />
         
  <mx:CheckBox id="allDayEventCheckbox" label="@Resource(bundle='calendarsample', key='calendarsample.event.label.AllDay')" 
               fontWeight="bold" enabled="false" click="updateAllDay()" />
  
  <mx:Spacer height="10" width="100%" />
    
  <mx:Label id="descriptionLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.Description')" 
            fontWeight="bold" textAlign="right" enabled="false"/>
            
  <mx:TextArea id="descriptionTextArea"  width="100%" height="50" change="updateDescription()" enabled="false" />
  
  <mx:Spacer height="10" width="100%" />
  
  <mx:Label id="calendarLabel" text="@Resource(bundle='calendarsample', key='calendarsample.event.label.Calendar')" 
             fontWeight="bold" textAlign="right" enabled="false"/>
  
  <mx:RadioButtonGroup id="radioGroup" itemClick="updateCalendar(event)" />
  
  <mx:HBox verticalAlign="middle">
    <mx:Box id="calendarColor1" width="20" height="20" borderColor="#CCCCCC" borderStyle="solid" />
    <mx:RadioButton id="calendarProRadio" groupName="radioGroup" 
                    label="@Resource(bundle='calendarsample', key='calendarsample.calendar.Professional')" 
                    enabled="false" />
  </mx:HBox>
  
  <mx:HBox verticalAlign="middle">
    <mx:Box id="calendarColor2" width="20" height="20" borderColor="#CCCCCC" borderStyle="solid" />
    <mx:RadioButton id="calendarPerRadio" groupName="radioGroup" 
                    label="@Resource(bundle='calendarsample', key='calendarsample.calendar.Personal')" 
                    enabled="false" />
  </mx:HBox> 
  
</mx:Panel>
