<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Y31,5724-Z78
// Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" implements="recurrence.IRecurrenceRuleEditor" 
         verticalGap="10" creationComplete="init()">

  <mx:Script>
    <![CDATA[
      import mx.controls.Label;
      import mx.core.UIComponent;
      import mx.validators.NumberValidator;
      import ilog.calendar.recurrence.RRule;
      
      private function init():void {
        buildUI();
      }
      
      public function set recurrenceRule(value:RRule):void {
        var r:RRule = value;
        _valid = true;
        
        if (value.freq == RRule.DAILY) {
          
          if (value.byDay.length != 0) {
            
            if (value.byDay.join(",") == "MO,TU,WE,TH,FR") {            
              radioGroup.selectedValue = "radio2";
            } else {
              _valid = false
            }
            
          } else {
          
            radioGroup.selectedValue = "radio1";
            interval.text = value.interval.toString();
          }         
          
          if (_valid) {
            _valid = Util.checkDefaults(value, ["freq", "byDay", "interval", "until", "count"]);
          }  
          
        } else {
                    
          //default
          reset();        
          _valid = false;  
        }
      }
      
      public function get recurrenceRule():RRule {
        
        var r:RRule;
        
        if (radioGroup.selectedValue == "radio1") {
          
          r = new RRule();
          r.freq = RRule.DAILY;
          
          var inter:int = parseInt(interval.text);
        
          if (inter > 1) {
            r.interval = inter;
          }
             
        } else {
                    
          r = new RRule("FREQ=DAILY;BYDAY=MO,TU,WE,TH,FR");
          
        }
        
        return r; 
      }
      
      private function buildUI():void {
        //build first choice
        var format:String = resourceManager.getString("calendarsample", "calendarsample.recurrence.ruleeditor.daily.interval", ["|$interval|"]);
        
        Util.buildUI(this, choice1, format, handlerChoice1);
        
      }
      
      private function handlerChoice1(e:Event):void {
        moveRadio(1);
        dispatch();
      } 
           
      private function validateInterval():void {               
        var i:int = Util.validateInt(interval.text, true);
        interval.text = i.toString();
        radioGroup.selectedValue = "radio1";
        dispatch();
      }
      
      private function dispatch():void {
        dispatchEvent(new Event("ruleChanged", true));        
      }
      
      public function reset():void {
        interval.text = "1";
        radioGroup.selectedValue = "radio1"; 
        _valid = true;
      }
      
      private function moveRadio(id:int):void {
        radioGroup.selectedValue = "radio"+id;
      }
      
      private var _valid:Boolean = true;
      
      public function isValid():Boolean {
        return _valid;
      }
           
      
    ]]>
  </mx:Script>

  <mx:RadioButtonGroup id="radioGroup"  change="dispatch()"  />
  
  <mx:HBox>
    <mx:RadioButton id="radio1" groupName="radioGroup" value="radio1" selected="true" />
    
    <mx:HBox id="choice1" horizontalGap="0">
      <mx:TextInput id="interval"  width="37" text="1" change="validateInterval()"/>    
    </mx:HBox>
  </mx:HBox>
  
  <mx:HBox id="choice2">
    <mx:RadioButton groupName="radioGroup" value="radio2" />
    <mx:Label text="@Resource(bundle='calendarsample', key='calendarsample.recurrence.ruleeditor.label.everyWeekday')" 
              click="moveRadio(2); dispatch()"/>    
  </mx:HBox>
    
</mx:VBox>
