/**
 * This is a generated class and is not intended for modification.  To customize behavior
 * of this value object you may modify the generated sub-class of this class - Address.as.
 */

package ch.plannr.client.datatypes
{
import com.adobe.fiber.services.IFiberManagingService;
import com.adobe.fiber.util.FiberUtils;
import com.adobe.fiber.valueobjects.IValueObject;
import flash.events.Event;
import flash.events.EventDispatcher;
import mx.binding.utils.ChangeWatcher;
import mx.events.PropertyChangeEvent;
import mx.validators.ValidationResult;

import flash.net.registerClassAlias;
import flash.net.getClassByAlias;
import com.adobe.fiber.core.model_internal;
import com.adobe.fiber.valueobjects.IPropertyIterator;
import com.adobe.fiber.valueobjects.AvailablePropertyIterator;

use namespace model_internal;

[ExcludeClass]
public class _Super_Address extends flash.events.EventDispatcher implements com.adobe.fiber.valueobjects.IValueObject
{
    model_internal static function initRemoteClassAliasSingle(cz:Class) : void
    {
    }

    model_internal static function initRemoteClassAliasAllRelated() : void
    {
    }

    model_internal var _dminternal_model : _AddressEntityMetadata;

    /**
     * properties
     */
    private var _internal_street1 : String;
    private var _internal_street2 : String;
    private var _internal_zip : String;
    private var _internal_city : String;
    private var _internal_countryCode : String;

    private static var emptyArray:Array = new Array();


    /**
     * derived property cache initialization
     */
    model_internal var _cacheInitialized_isValid:Boolean = false;

    model_internal var _changeWatcherArray:Array = new Array();

    public function _Super_Address()
    {
        _model = new _AddressEntityMetadata(this);

        // Bind to own data properties for cache invalidation triggering
        model_internal::_changeWatcherArray.push(mx.binding.utils.ChangeWatcher.watch(this, "street1", model_internal::setterListenerStreet1));
        model_internal::_changeWatcherArray.push(mx.binding.utils.ChangeWatcher.watch(this, "street2", model_internal::setterListenerStreet2));
        model_internal::_changeWatcherArray.push(mx.binding.utils.ChangeWatcher.watch(this, "zip", model_internal::setterListenerZip));
        model_internal::_changeWatcherArray.push(mx.binding.utils.ChangeWatcher.watch(this, "city", model_internal::setterListenerCity));
        model_internal::_changeWatcherArray.push(mx.binding.utils.ChangeWatcher.watch(this, "countryCode", model_internal::setterListenerCountryCode));

    }

    /**
     * data property getters
     */

    [Bindable(event="propertyChange")]
    public function get street1() : String
    {
        return _internal_street1;
    }

    [Bindable(event="propertyChange")]
    public function get street2() : String
    {
        return _internal_street2;
    }

    [Bindable(event="propertyChange")]
    public function get zip() : String
    {
        return _internal_zip;
    }

    [Bindable(event="propertyChange")]
    public function get city() : String
    {
        return _internal_city;
    }

    [Bindable(event="propertyChange")]
    public function get countryCode() : String
    {
        return _internal_countryCode;
    }

    /**
     * data property setters
     */

    public function set street1(value:String) : void
    {
        var oldValue:String = _internal_street1;
        if (oldValue !== value)
        {
            _internal_street1 = value;
            this.dispatchEvent(mx.events.PropertyChangeEvent.createUpdateEvent(this, "street1", oldValue, _internal_street1));
        }
    }

    public function set street2(value:String) : void
    {
        var oldValue:String = _internal_street2;
        if (oldValue !== value)
        {
            _internal_street2 = value;
            this.dispatchEvent(mx.events.PropertyChangeEvent.createUpdateEvent(this, "street2", oldValue, _internal_street2));
        }
    }

    public function set zip(value:String) : void
    {
        var oldValue:String = _internal_zip;
        if (oldValue !== value)
        {
            _internal_zip = value;
            this.dispatchEvent(mx.events.PropertyChangeEvent.createUpdateEvent(this, "zip", oldValue, _internal_zip));
        }
    }

    public function set city(value:String) : void
    {
        var oldValue:String = _internal_city;
        if (oldValue !== value)
        {
            _internal_city = value;
            this.dispatchEvent(mx.events.PropertyChangeEvent.createUpdateEvent(this, "city", oldValue, _internal_city));
        }
    }

    public function set countryCode(value:String) : void
    {
        var oldValue:String = _internal_countryCode;
        if (oldValue !== value)
        {
            _internal_countryCode = value;
            this.dispatchEvent(mx.events.PropertyChangeEvent.createUpdateEvent(this, "countryCode", oldValue, _internal_countryCode));
        }
    }

    /**
     * Data property setter listeners
     *
     * Each data property whose value affects other properties or the validity of the entity
     * needs to invalidate all previously calculated artifacts. These include:
     *  - any derived properties or constraints that reference the given data property.
     *  - any availability guards (variant expressions) that reference the given data property.
     *  - any style validations, message tokens or guards that reference the given data property.
     *  - the validity of the property (and the containing entity) if the given data property has a length restriction.
     *  - the validity of the property (and the containing entity) if the given data property is required.
     */

    model_internal function setterListenerStreet1(value:flash.events.Event):void
    {
        _model.invalidateDependentOnStreet1();
    }

    model_internal function setterListenerStreet2(value:flash.events.Event):void
    {
        _model.invalidateDependentOnStreet2();
    }

    model_internal function setterListenerZip(value:flash.events.Event):void
    {
        _model.invalidateDependentOnZip();
    }

    model_internal function setterListenerCity(value:flash.events.Event):void
    {
        _model.invalidateDependentOnCity();
    }

    model_internal function setterListenerCountryCode(value:flash.events.Event):void
    {
        _model.invalidateDependentOnCountryCode();
    }


    /**
     * valid related derived properties
     */
    model_internal var _isValid : Boolean;
    model_internal var _invalidConstraints:Array = new Array();
    model_internal var _validationFailureMessages:Array = new Array();

    /**
     * derived property calculators
     */

    /**
     * isValid calculator
     */
    model_internal function calculateIsValid():Boolean
    {
        var violatedConsts:Array = new Array();
        var validationFailureMessages:Array = new Array();

        var propertyValidity:Boolean = true;
        if (!_model.street1IsValid)
        {
            propertyValidity = false;
            com.adobe.fiber.util.FiberUtils.arrayAdd(validationFailureMessages, _model.model_internal::_street1ValidationFailureMessages);
        }
        if (!_model.street2IsValid)
        {
            propertyValidity = false;
            com.adobe.fiber.util.FiberUtils.arrayAdd(validationFailureMessages, _model.model_internal::_street2ValidationFailureMessages);
        }
        if (!_model.zipIsValid)
        {
            propertyValidity = false;
            com.adobe.fiber.util.FiberUtils.arrayAdd(validationFailureMessages, _model.model_internal::_zipValidationFailureMessages);
        }
        if (!_model.cityIsValid)
        {
            propertyValidity = false;
            com.adobe.fiber.util.FiberUtils.arrayAdd(validationFailureMessages, _model.model_internal::_cityValidationFailureMessages);
        }
        if (!_model.countryCodeIsValid)
        {
            propertyValidity = false;
            com.adobe.fiber.util.FiberUtils.arrayAdd(validationFailureMessages, _model.model_internal::_countryCodeValidationFailureMessages);
        }

        model_internal::_cacheInitialized_isValid = true;
        model_internal::invalidConstraints_der = violatedConsts;
        model_internal::validationFailureMessages_der = validationFailureMessages;
        return violatedConsts.length == 0 && propertyValidity;
    }

    /**
     * derived property setters
     */

    model_internal function set isValid_der(value:Boolean) : void
    {
        var oldValue:Boolean = model_internal::_isValid;
        if (oldValue !== value)
        {
            model_internal::_isValid = value;
            _model.model_internal::fireChangeEvent("isValid", oldValue, model_internal::_isValid);
        }
    }

    /**
     * derived property getters
     */

    [Transient]
    [Bindable(event="propertyChange")]
    public function get _model() : _AddressEntityMetadata
    {
        return model_internal::_dminternal_model;
    }

    public function set _model(value : _AddressEntityMetadata) : void
    {
        var oldValue : _AddressEntityMetadata = model_internal::_dminternal_model;
        if (oldValue !== value)
        {
            model_internal::_dminternal_model = value;
            this.dispatchEvent(mx.events.PropertyChangeEvent.createUpdateEvent(this, "_model", oldValue, model_internal::_dminternal_model));
        }
    }

    /**
     * methods
     */


    /**
     *  services
     */
    private var _managingService:com.adobe.fiber.services.IFiberManagingService;

    public function set managingService(managingService:com.adobe.fiber.services.IFiberManagingService):void
    {
        _managingService = managingService;
    }

    model_internal function set invalidConstraints_der(value:Array) : void
    {
        var oldValue:Array = model_internal::_invalidConstraints;
        // avoid firing the event when old and new value are different empty arrays
        if (oldValue !== value && (oldValue.length > 0 || value.length > 0))
        {
            model_internal::_invalidConstraints = value;
            _model.model_internal::fireChangeEvent("invalidConstraints", oldValue, model_internal::_invalidConstraints);
        }
    }

    model_internal function set validationFailureMessages_der(value:Array) : void
    {
        var oldValue:Array = model_internal::_validationFailureMessages;
        // avoid firing the event when old and new value are different empty arrays
        if (oldValue !== value && (oldValue.length > 0 || value.length > 0))
        {
            model_internal::_validationFailureMessages = value;
            _model.model_internal::fireChangeEvent("validationFailureMessages", oldValue, model_internal::_validationFailureMessages);
        }
    }

    model_internal var _doValidationCacheOfStreet1 : Array = null;
    model_internal var _doValidationLastValOfStreet1 : String;

    model_internal function _doValidationForStreet1(valueIn:Object):Array
    {
        var value : String = valueIn as String;

        if (model_internal::_doValidationCacheOfStreet1 != null && model_internal::_doValidationLastValOfStreet1 == value)
           return model_internal::_doValidationCacheOfStreet1 ;

        _model.model_internal::_street1IsValidCacheInitialized = true;
        var validationFailures:Array = new Array();
        var errorMessage:String;
        var failure:Boolean;

        var valRes:ValidationResult;
        if (_model.isStreet1Available && _internal_street1 == null)
        {
            validationFailures.push(new ValidationResult(true, "", "", "street1 is required"));
        }

        model_internal::_doValidationCacheOfStreet1 = validationFailures;
        model_internal::_doValidationLastValOfStreet1 = value;

        return validationFailures;
    }
    
    model_internal var _doValidationCacheOfStreet2 : Array = null;
    model_internal var _doValidationLastValOfStreet2 : String;

    model_internal function _doValidationForStreet2(valueIn:Object):Array
    {
        var value : String = valueIn as String;

        if (model_internal::_doValidationCacheOfStreet2 != null && model_internal::_doValidationLastValOfStreet2 == value)
           return model_internal::_doValidationCacheOfStreet2 ;

        _model.model_internal::_street2IsValidCacheInitialized = true;
        var validationFailures:Array = new Array();
        var errorMessage:String;
        var failure:Boolean;

        var valRes:ValidationResult;
        if (_model.isStreet2Available && _internal_street2 == null)
        {
            validationFailures.push(new ValidationResult(true, "", "", "street2 is required"));
        }

        model_internal::_doValidationCacheOfStreet2 = validationFailures;
        model_internal::_doValidationLastValOfStreet2 = value;

        return validationFailures;
    }
    
    model_internal var _doValidationCacheOfZip : Array = null;
    model_internal var _doValidationLastValOfZip : String;

    model_internal function _doValidationForZip(valueIn:Object):Array
    {
        var value : String = valueIn as String;

        if (model_internal::_doValidationCacheOfZip != null && model_internal::_doValidationLastValOfZip == value)
           return model_internal::_doValidationCacheOfZip ;

        _model.model_internal::_zipIsValidCacheInitialized = true;
        var validationFailures:Array = new Array();
        var errorMessage:String;
        var failure:Boolean;

        var valRes:ValidationResult;
        if (_model.isZipAvailable && _internal_zip == null)
        {
            validationFailures.push(new ValidationResult(true, "", "", "zip is required"));
        }

        model_internal::_doValidationCacheOfZip = validationFailures;
        model_internal::_doValidationLastValOfZip = value;

        return validationFailures;
    }
    
    model_internal var _doValidationCacheOfCity : Array = null;
    model_internal var _doValidationLastValOfCity : String;

    model_internal function _doValidationForCity(valueIn:Object):Array
    {
        var value : String = valueIn as String;

        if (model_internal::_doValidationCacheOfCity != null && model_internal::_doValidationLastValOfCity == value)
           return model_internal::_doValidationCacheOfCity ;

        _model.model_internal::_cityIsValidCacheInitialized = true;
        var validationFailures:Array = new Array();
        var errorMessage:String;
        var failure:Boolean;

        var valRes:ValidationResult;
        if (_model.isCityAvailable && _internal_city == null)
        {
            validationFailures.push(new ValidationResult(true, "", "", "city is required"));
        }

        model_internal::_doValidationCacheOfCity = validationFailures;
        model_internal::_doValidationLastValOfCity = value;

        return validationFailures;
    }
    
    model_internal var _doValidationCacheOfCountryCode : Array = null;
    model_internal var _doValidationLastValOfCountryCode : String;

    model_internal function _doValidationForCountryCode(valueIn:Object):Array
    {
        var value : String = valueIn as String;

        if (model_internal::_doValidationCacheOfCountryCode != null && model_internal::_doValidationLastValOfCountryCode == value)
           return model_internal::_doValidationCacheOfCountryCode ;

        _model.model_internal::_countryCodeIsValidCacheInitialized = true;
        var validationFailures:Array = new Array();
        var errorMessage:String;
        var failure:Boolean;

        var valRes:ValidationResult;
        if (_model.isCountryCodeAvailable && _internal_countryCode == null)
        {
            validationFailures.push(new ValidationResult(true, "", "", "countryCode is required"));
        }

        model_internal::_doValidationCacheOfCountryCode = validationFailures;
        model_internal::_doValidationLastValOfCountryCode = value;

        return validationFailures;
    }
    

}

}
