<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Y31,5724-Z78
// Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->
<local:ExpandCollapseEventRenderer xmlns:fx="http://ns.adobe.com/mxml/2009" 
                                   xmlns:s="library://ns.adobe.com/flex/spark" 
                                   xmlns:mx="library://ns.adobe.com/flex/mx"  
                                   xmlns:local="ch.plannr.view.ibm.*"
                                   contentBackgroundColor="{getBackground(data)}"
                                   depth.expanded="2"
                                   x.expanded="40"
                                   y.expanded="40"
                                   width.expanded="{UIComponent(owner).width - 80}"
                                   height.expanded="{UIComponent(owner).height - 80}"             
                                   includeInLayout.expanded="false"
                                   click.expanded="expanded=false; event.stopImmediatePropagation()"
                                   mouseDown.expanded="event.stopImmediatePropagation()"
                                   currentStateChange="updateLabel(event)">
  
  <fx:Script>
    <![CDATA[
      import mx.core.FlexGlobals;
      import mx.core.UIComponent;
      import mx.events.StateChangeEvent;
      
      static private const contentFill:Array = ["bgFill"];
      
      /**
       * @private 
       */
      override protected function get backgroundItems():Array {return contentFill};
      
      static private const borderStroke:Array = ["bStroke"];
      
      /**
       * @private
       */
      override protected function get borderItems():Array {return borderStroke};
      
      private function getBackground(item:Object):uint {
        // if this is a plant let's choose a different
        // background color
        if (item.@plant == "true")
          return 0x449BD5;
        else
          return 0x9AC5E6;
      }
      
      private function updateLabel(event:StateChangeEvent):void {
        if (event.newState == "expanded") {
          // do not use binding to update the label to improve performances
          label.text = resourceManager.getString("timelinesample", "timelinesample.renderer.text", 
            [ data.@date, data.city, data.state ]);
        }
      }
    ]]>
  </fx:Script>
  
  <local:states>
    <s:State name="normal" />
    <s:State name="selected"/>
    <s:State name="expanded"/>
  </local:states>  
  
  <local:transitions>
    <s:Transition fromState="*" toState="expanded" >
      <s:Parallel duration="500" target="{this}">
        <s:Move />
        <s:Resize />
      </s:Parallel> 
    </s:Transition>
    <s:Transition fromState="expanded" toState="*">
      <s:Sequence>
        <!-- avoid laying out during animation -->
        <s:SetAction property="includeInLayout" value="false" target="{this}"/>
        <s:Parallel duration="500" target="{this}">
          <s:Move />
          <s:Resize />
        </s:Parallel>
        <!-- put back layout -->
        <s:SetAction property="includeInLayout" value="true" target="{this}"/>        
      </s:Sequence>
      
    </s:Transition>
  </local:transitions>
  
  <s:Rect id="background" top="0" left="0" right="0" bottom="0" radiusX="5" >
    <s:stroke>
      <s:SolidColorStroke id="bStroke" pixelHinting="true"/>      
    </s:stroke>
    <s:fill>
      <s:SolidColor id="bgFill"/>
    </s:fill>
  </s:Rect>
  
  <s:VGroup top="0" left="0" right="0" bottom="0" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
    <mx:Image source="@Embed('../resources/expandCollapseIcons.swf#expand')" 
              source.expanded="@Embed('../resources/expandCollapseIcons.swf#collapse')"
              click="expanded=!expanded; event.stopImmediatePropagation()"/>
    
    <!-- when non expanded use a copy of default renderer -->
    <s:VGroup width="100%" 
              visible.expanded="false" includeInLayout.expanded="false"
              paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5">
    </s:VGroup>
    
    <!-- when expanded display differently -->
    <s:Label id="label" 
             visible.expanded="true" includeInLayout.expanded="true" 
             visible="false" includeInLayout="false"
             fontSize="30" width="100%" height="100%"/>
  </s:VGroup>
</local:ExpandCollapseEventRenderer>
