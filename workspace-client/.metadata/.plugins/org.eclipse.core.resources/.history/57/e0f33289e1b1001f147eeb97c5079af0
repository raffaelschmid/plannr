<?xml version="1.0" encoding="utf-8"?>
<!--
///////////////////////////////////////////////////////////////////////////////
// Licensed Materials - Property of IBM
// 5724-Y31,5724-Z78
// Â© Copyright IBM Corporation 2007, 2010. All Rights Reserved.
//
// Note to U.S. Government Users Restricted Rights:
// Use, duplication or disclosure restricted by GSA ADP Schedule
// Contract with IBM Corp.
///////////////////////////////////////////////////////////////////////////////
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
               xmlns:s="library://ns.adobe.com/flex/spark" 
               xmlns:mx="library://ns.adobe.com/flex/mx" 
               xmlns:ibm="http://www.ibm.com/xmlns/prod/ilog/elixir/2010"
               xmlns:local="*"
               >
  <fx:Style source="../resources/elixirsample.css"/>  
  <fx:Style>
    @namespace "http://www.ibm.com/xmlns/prod/ilog/elixir/2010";
    
    TimelineRenderer {
      color : #345B98;
      selectionColor : #E7EDF5;
      rollOverColor : #E7EDF5;
      selectionAndRollOverColor : #E7EDF5;
      contentBorderColor: #345B98;
    }
    
    TimelineRangeSelector {
      moveCursor : Embed('../resources/move-item-horizontal-cursor.png');
      resizeCursor : Embed('../resources/resize-item-horizontal-cursor.png');
      invalidCursor : Embed('../resources/invalid-action-cursor.png');
    }
    
    NumericTimelineBand {
      skinClass : ClassReference('IBMEventBandSkin');
      panCursor : Embed('../resources/pan-horizontal-cursor.png');
    }
    
    NumericTimelineBand#overviewBand {
      skinClass : ClassReference('IBMEventOverviewBandSkin');
    }
    
    NumericTimelineBand#overviewBand NumericAxis {
      minorTicksVisible : false;
    }
  </fx:Style>
  <fx:Script>
    <![CDATA[
      import com.ibm.ilog.elixir.timeline.layouts.TimelineLayout;
      import com.ibm.ilog.elixir.timeline.skins.spark.HTimelineAxisSkin;
      import com.ibm.ilog.elixir.timeline.skins.spark.HTimelineGridSkin;
      
      import flashx.textLayout.conversion.TextConverter;
      import flashx.textLayout.elements.TextFlow;
      
      import mx.collections.XMLListCollection;
      import mx.events.CollectionEvent;
      import mx.events.CollectionEventKind;
      import mx.events.FlexEvent;
      
      private var eventsToBeAdded:Array;
      public var additionalEvents:Array;
      private var timer:Timer;
      
      public static var lastExpanded:ExpandCollapseEventRenderer = null;
      
      private function load():void {
        var url:String;
        
        if (resourceManager.localeChain.indexOf("ja_JP") != -1) {
          url = "ja_JP/IBM-Events-1.xml"; 
        } else {
          url = "en_US/IBM-Events-1.xml";
        }
        
        var loader:URLLoader = new URLLoader();         
        
        loader.addEventListener(Event.COMPLETE, dataLoaded);
        
        loader.load(new URLRequest(DemoUtil.getAbsolutePathTo(url)));        
      }
      
      private function dataLoaded(evtObj:Event):void {          
        var events:XML = XML(evtObj.target.data);
        tl.dataProvider = new XMLListCollection(events.*);
        XMLListCollection(tl.dataProvider).filterFunction = filterFunction;
      }
      
      private function loadAdditionalData():void {
        var url:String;
        
        if (resourceManager.localeChain.indexOf("ja_JP") != -1) {
          url = "ja_JP/IBM-Events-2.xml"; 
        } else {
          url = "en_US/IBM-Events-2.xml";
        }
        
        var loader:URLLoader = new URLLoader();         
        
        loader.addEventListener(Event.COMPLETE, additionalDataLoaded);
        
        loader.load(new URLRequest(DemoUtil.getAbsolutePathTo(url)));
      }   
      
      private function additionalDataLoaded(evtObj:Event):void {          
        var additionalData:XML = XML(evtObj.target.data);
        eventsToBeAdded = new Array();
        for each (var item:* in additionalData.*) {
          eventsToBeAdded.push(item);
        }
        additionalEvents = eventsToBeAdded.concat();
        // we will add them through a timer to simulate real time
        // addition to the data
        timer = new Timer(300);
        timer.addEventListener(TimerEvent.TIMER, pushPlant);
        timer.start();
      }        
      
      private function pushPlant(event:TimerEvent):void {
        if (eventsToBeAdded.length > 0) {
          tl.dataProvider.addItem(eventsToBeAdded.pop());
          if (eventsToBeAdded.length > 0) {
            tl.dataProvider.addItem(eventsToBeAdded.pop());
          }
        } else {
          timer.stop();
        }
      }
      
      private function refreshFilter():void {
        cursorManager.setBusyCursor();
        callLater(refreshFilterImpl);
      }
      
      private function refreshFilterImpl():void {
        var xmllist:XMLListCollection = tl.dataProvider as XMLListCollection;
        tl.mainBand.dataGroup.addEventListener(FlexEvent.UPDATE_COMPLETE, timeline_updateCompleteHandler);
        xmllist.refresh();
      }
      
      private function timeline_updateCompleteHandler(event:FlexEvent):void {
        cursorManager.removeBusyCursor();
      }
      
      private function filterFunction(item:Object):Boolean {
        if (item.@plant == "true") {
          if (!plants.selected)
            return false;
        } else if (!offices.selected) {
          return false;
        }
        if (item.@ww == "true") {
          if (!ww.selected)
            return false;
        } else if (!us.selected) {
          return false;
        }
        return true;
      }
      
      private function switchView():void {
        if (compact.selected) {
          tl.setStyle("overviewBandVisible", false);
          tl.overviewBand.dataProvider = null;
          tl.itemRenderer = new ClassFactory(IBMEventSmallRenderer);
          tl.connectorRenderer = null;
          tl.mainBand.axis.setStyle("skinClass", IBMEventAxisSkin);
          tl.mainBand.grid.setStyle("skinClass", IBMEventGridSkin);
        } else {
          tl.setStyle("overviewBandVisible", true);
          tl.overviewBand.dataProvider =  tl.dataProvider;
          tl.itemRenderer = new ClassFactory(IBMEventRenderer);
          tl.connectorRenderer = new ClassFactory(IBMEventConnectorRenderer);
          tl.mainBand.axis.setStyle("skinClass", HTimelineAxisSkin);
          tl.mainBand.grid.setStyle("skinClass", HTimelineGridSkin);
        }
      }
      
      private function getText():TextFlow {
        return TextConverter.importToFlow(resourceManager.getString("timelinesample", "timelinesample.summary"), 
          TextConverter.TEXT_LAYOUT_FORMAT);
      }
    ]]>
  </fx:Script>
  <s:Scroller left="5" right="5" top="5" bottom="5">
    <s:VGroup>
      <local:ElixirSampleBar id="bar" 
                             label="@Resource(bundle='timelinesample', key='timelinesample.application.title')" 
                             creationComplete="load()"/>
      <s:HGroup width="100%" height="100%" paddingBottom="10" paddingLeft="5" paddingRight="5" paddingTop="10">
        <s:VGroup height="100%">
          <s:Panel title="@Resource(bundle='timelinesample', key='timelinesample.properties')"
                   width="250">
            <s:layout>
              <s:VerticalLayout gap="25" paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
            </s:layout>
            <s:VGroup gap="10">
              <s:Label text="@Resource(bundle='timelinesample', key='timelinesample.actions')" fontWeight="bold"/>
              <s:HGroup>
                <mx:Button icon="@Embed('../resources/zoom.png')"  width="24" height="24"
                           click="tl.mainBand.axis.zoomBy(1.4, null, true)"
                           toolTip="@Resource(bundle='timelinesample', key='timelinesample.zoomin')"/>
                <mx:Button icon="@Embed('../resources/unzoom.png')" width="24" height="24"
                           click="tl.mainBand.axis.zoomBy(1/1.4, null, true)"
                           toolTip="@Resource(bundle='timelinesample', key='timelinesample.zoomout')"/>
                <mx:Button icon="@Embed('../resources/initial-zoom.png')" width="24" height="24"
                           click="tl.start=1924;tl.end=1944"
                           toolTip="@Resource(bundle='timelinesample', key='timelinesample.initialzoom')"/>
              </s:HGroup>
            </s:VGroup>
            <s:VGroup gap="10"> 
              <s:Label text="@Resource(bundle='timelinesample', key='timelinesample.options')" fontWeight="bold"/>
              <s:Button id="additional" label="@Resource(bundle='timelinesample', key='timelinesample.additional')" click="additional.enabled=false;loadAdditionalData()"/>
              <s:CheckBox label="@Resource(bundle='timelinesample', key='timelinesample.compact')" selected="false" id="compact" change="switchView()"/>          
            </s:VGroup>
            <s:VGroup gap="10">
              <s:Label text="@Resource(bundle='timelinesample', key='timelinesample.filters')" fontWeight="bold"/>
              <s:HGroup gap="10">
                <s:VGroup gap="10">
                  <s:CheckBox label="@Resource(bundle='timelinesample', key='timelinesample.us')" selected="true" id="us" change="refreshFilter()"/>
                  <s:CheckBox label="@Resource(bundle='timelinesample', key='timelinesample.ww')" selected="true" id="ww" change="refreshFilter()"/>               
                </s:VGroup>
                <s:VGroup gap="10">
                  <s:CheckBox label="@Resource(bundle='timelinesample', key='timelinesample.offices')" selected="true" id="offices" change="refreshFilter()"/>
                  <s:CheckBox label="@Resource(bundle='timelinesample', key='timelinesample.plants')" selected="true" id="plants" change="refreshFilter()"/>
                </s:VGroup>
              </s:HGroup>              
            </s:VGroup>
          </s:Panel>
          <s:Panel title="@Resource(bundle='timelinesample', key='timelinesample.help')" width="250" height="100%">
            <s:TextArea fontSize="16" editable="false" selectable="false" height="100%" 
                        textFlow="{getText()}" borderVisible="false"/>          
          </s:Panel>        
        </s:VGroup>    
        <s:Panel title="@Resource(bundle='timelinesample', key='timelinesample.timeline')"  width="100%" height="100%">
          <ibm:HNumericTimeline id="tl" width="100%" height="100%" 
                                creationComplete="TimelineLayout(tl.mainBand.layout).allowAdjustment=false"
                                valueField="@date"
                                borderVisible="false"
                                labelField="city"
                                majorTickInterval="5"
                                minorTickInterval="1"
                                overviewMajorTickInterval="10"
                                minimum="1913" maximum="1981"
                                maxVisibleLength="30"
                                start="1924" end="1944"
                                useVirtualLayout="false"
                                overviewUseVirtualLayout="false"
                                itemRenderer="IBMEventRenderer"
                                overviewItemRenderer="IBMEventOverviewRenderer"
                                visibilityIndicatorRenderer="IBMEventVisibilityRenderer"
                                connectorRenderer="IBMEventConnectorRenderer"/>        
        </s:Panel>
      </s:HGroup>
    </s:VGroup>
  </s:Scroller>
</s:Application>
