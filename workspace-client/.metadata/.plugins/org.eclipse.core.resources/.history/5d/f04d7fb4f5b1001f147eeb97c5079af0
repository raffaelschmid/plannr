<?xml version="1.0" encoding="utf-8"?>
<s:NavigatorContent label="Scheduler" width="100%" height="100%"  
					xmlns:fx="http://ns.adobe.com/mxml/2009" 
					xmlns:s="library://ns.adobe.com/flex/spark" 
					xmlns:mx="library://ns.adobe.com/flex/mx" 
					xmlns:ibm="http://www.ibm.com/xmlns/prod/ilog/elixir/2010"
					 xmlns:ilog="http://www.ilog.com/2007/ilog/flex"
					 xmlns:local="ch.plannr.view.renderer.*" 
					 contentCreationComplete="init()">
	<fx:Script>
		<![CDATA[
			import ilog.calendar.CalendarItem;
			import ilog.utils.GregorianCalendar;
			import ilog.utils.TimeUnit;
			
			import mx.controls.Alert;
			import mx.events.ItemClickEvent;
			
			import spark.events.IndexChangeEvent;
			
			private var baseModel:XML = 
				<list>
				  <event d="1" s="8"  e="3"  key="meeting"  calendar="0" />
				  <event d="1" s="12" e="2"  key="misc"     calendar="1" />
				  <event d="1" s="14" e="2"  key="meeting"  calendar="0" />
				  <event d="1" s="15" e="3"  key="training" calendar="0" />
				  <event d="1" s="20" e="2"  key="misc"     calendar="1" />
				  <event d="2" s="8"  e="1"  key="meeting"  calendar="0" />
				  <event d="2" s="9"  e="1"  key="meeting"  calendar="0" />
				  <event d="2" s="10" e="2"  key="meeting"  calendar="1" />
				  <event d="2" s="12" e="2"  key="misc"     calendar="0" />
				  <event d="2" s="14" e="4"  key="training" calendar="0" />
				  <event d="3" s="0"  e="24" key="misc"     calendar="1" />
				  <event d="3" s="8" e="3"   key="meeting"  calendar="0" />
				  <event d="3" s="13" e="3"  key="training" calendar="0" />
				  <event d="4" s="7"  e="3"  key="meeting"  calendar="0" />
				  <event d="4" s="12" e="2"  key="misc"     calendar="0" />
				  <event d="4" s="13" e="3"  key="meeting"  calendar="1" />
				  <event d="4" s="14" e="3"  key="training" calendar="0" />
				  <event d="4" s="19" e="2"  key="misc"     calendar="0" />          
				  <event d="5" s="9"  e="3"  key="meeting"  calendar="1" />
				  <event d="5" s="12" e="2"  key="misc"     calendar="0" />          
				  <event d="5" s="15" e="3"  key="training" calendar="0" />
				  <event d="5" s="20" e="4"  key="misc"     calendar="0" />          
				</list>;
			
			private function createDefaultModel():XMLList {
				
				var gCal:GregorianCalendar = new GregorianCalendar();
				var startOfWeek:Date = gCal.floor(new Date(), TimeUnit.WEEK, 1);               
				
				for each (var evt:XML in baseModel.children()) {
					var dayOfWeek:int = parseInt(evt.@d);          
					
					var startHour:int = parseInt(evt.@s);
					var duration:int = parseInt(evt.@e);
					
					var s:Date = gCal.addUnits(startOfWeek, TimeUnit.DAY, dayOfWeek);                   
					s = gCal.addUnits(s, TimeUnit.HOUR, startHour, true);
					
					var e:Date = gCal.addUnits(s, TimeUnit.HOUR, duration);
					
					evt.@startTime = s.toString();
					evt.@endTime = e.toString();
					
					evt.@summary = resourceManager.getString("calendarsample", "model.summary." + evt.@key);          
				}
				
				return baseModel.children();
			}
			
			
			
			private var modes:Array = [
				Calendar.DAY_MODE,
				Calendar.WORK_WEEK_MODE,
				Calendar.WEEK_MODE,
				Calendar.MONTH_MODE
			];  
			
			/**
			 * List of calendars 
			 */ 
			[Bindable]  
			private var calendars:Array = [
				{ id: "0", label: "professional", color:0x6B56BB},
				{ id: "1", label: "personal", color:0x2B8F40},        
			];   
		
			[Bindable]
			private var totalPrice:Number = 0.00;
		
	/*		protected function itemIndexChangeHandler(event:IndexChangeEvent):void
			{
				schedulerViewStack.selectedChild=overlays.selectedItem.show;
			}*/
			
			private function itemColorFunction(calItem:CalendarItem):Object {
				
				var now:Date = new Date();
				
				if (calItem.endTime < now) {
					return 0x555555;
				} else {
					var index:int = parseInt(calItem.calendar as String);
					return calendars[index].color;        
				}
			}
			
			private function zoomInCalendar():void {
				if (cal.mode != Calendar.MONTH_MODE) {                   
					zoomInButton.enabled = cal.zoom(2, true);
					zoomOutButton.enabled = true;                    
				}
			}
			
			private function zoomOutCalendar():void {
				if (cal.mode != Calendar.MONTH_MODE) {          
					zoomOutButton.enabled = cal.zoom(0.5, true);
					zoomInButton.enabled = true;          
				}        
			}
			
			private function moveToCurrentDay():void {
				
				cal.date = new Date();
				cal.mode = Calendar.DAY_MODE;                                   
			}
			
			private function toggleMode(event:ItemClickEvent):void {
				if (cal.date == null) {          
					cal.date = cal.endDate;              
				}
				cal.mode = modes[event.index];
				
				cal.rowHeaderEnabled = cal.mode == Calendar.MONTH_MODE;
				cal.columnHeaderEnabled = cal.mode != Calendar.MONTH_MODE;
			}
			
			private function updateDisplayedTimeRangeLabel():void {
				var e:Date = cal.calendar.addUnits(cal.endDisplayedDate, TimeUnit.DAY, 1);
				rangeLabel.text = cal.getTimeRangeLabel(null, cal.startDisplayedDate, e);
			}
			
			private function init():void{
				toggleModeBar.dataProvider = ["a","b","c"
					/*resourceManager.getString('calendarsample', 'calendarsample.button.Day'),
					resourceManager.getString('calendarsample', 'calendarsample.button.WorkWeek'),
					resourceManager.getString('calendarsample', 'calendarsample.button.Week'),     
					resourceManager.getString('calendarsample', 'calendarsample.button.Month')*/
				];
				
				toggleModeBar.selectedIndex = 2;
				
				cal.dataProvider = createDefaultModel();
			}
		]]>
	</fx:Script>
	<mx:HBox height="100%" width="100%">
		<mx:HBox width="20%" height="100%">
			<mx:Form>
				<mx:FormItem label="Overlays">
					
				</mx:FormItem>
			</mx:Form>
		</mx:HBox>
		<mx:ViewStack id="schedulerViewStack" 
					  borderStyle="solid" 
					  width="80%" height="100%">
			<mx:VDividedBox width="100%" height="100%" label="All" id="all"  paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">
				<mx:Canvas width="100%">
					
					<mx:HBox left="0" bottom="0">
						<mx:Label id="rangeLabel" fontWeight="bold" fontSize="18" />                                           
					</mx:HBox>
					
					<mx:HBox id="box" right="0" bottom="0">
						
						<mx:Button id="zoomInButton" width="36" icon="@Embed(source='../resources/zoom.png')" click="zoomInCalendar()" />
						<mx:Button id="zoomOutButton" width="36" icon="@Embed(source='../resources/unzoom.png')" click="zoomOutCalendar()" />
						<mx:Box width="20" height="10" />
						
						<mx:Button id="prevButton" height="22" skin="ilog.skins.PreviousArrowSkin" click="cal.previousRange()"  />
						<mx:Button id="nextButton" height="22" skin="ilog.skins.NextArrowSkin" click="cal.nextRange()"  /> 
						<mx:Button label="@Resource(bundle='calendarsample', key='calendarsample.button.Today')" click="moveToCurrentDay()" />
						<mx:Box width="5" height="10" />
						
						<mx:ToggleButtonBar id="toggleModeBar" itemClick="toggleMode(event)"/>            
						
					</mx:HBox>
					
				</mx:Canvas>    
				<mx:HBox width="100%" height="60%">
					<ilog:Calendar id="cal" width="100%" height="100%"                                           
								   animationDuration="1000"                     
								   doubleClickEnabled="true"
								   itemColorFunction="{itemColorFunction}"                      
								   allowMultipleSelection="false"                                                 
								   startDisplayedTime="[8,0]"
								   endDisplayedTime="[18,0]"
								   showItemIndicators="true"
								   columnHeaderEnabled="true">
						<ilog:currentTimeIndicatorStroke >
							<mx:SolidColorStroke alpha="0.8" color="#9C35BE" weight="2" caps="none" />
						</ilog:currentTimeIndicatorStroke>
						
						<ilog:workingTimes>
							<fx:Object rangeStart="8:00" rangeEnd="18:00"/>
						</ilog:workingTimes>  
						
						<ilog:itemVerticalRenderer>
							<fx:Component>
								<ilog:CalendarItemVerticalRenderer/>
							</fx:Component>
						</ilog:itemVerticalRenderer>                       
						
					</ilog:Calendar>           
									</mx:HBox>
				<mx:HBox width="100%" height="40%">
					<mx:VBox width="50%" height="200">
						<mx:Form width="100%" height="100%">
							<mx:FormItem label="Title">
								<s:TextInput width="100%"/>
							</mx:FormItem>
							<mx:FormItem label="Description">
								<s:TextArea height="100" width="100%"/>
							</mx:FormItem>
						</mx:Form>
					</mx:VBox>
					<mx:VBox width="50%" height="200">
						<mx:Form width="100%" height="100%">
							<mx:FormItem label="From">
								<mx:DateField/>
							</mx:FormItem>
							<mx:FormItem label="To">
								<mx:DateField/>
							</mx:FormItem>
						</mx:Form>
					</mx:VBox>
				</mx:HBox>
			</mx:VDividedBox>
			<mx:VDividedBox width="100%" height="100%" label="All" id="vacation"  paddingLeft="10" paddingBottom="10" paddingRight="10" paddingTop="10">
			</mx:VDividedBox>
		</mx:ViewStack>
	</mx:HBox>
</s:NavigatorContent>
